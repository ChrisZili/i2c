
i2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016c4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800184c  0800184c  0001184c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001864  08001864  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08001864  08001864  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001864  08001864  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001864  08001864  00011864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001868  08001868  00011868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800186c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          00000020  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00020004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 14 .debug_info   00004c97  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001469  00000000  00000000  00024d0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000668  00000000  00000000  00026178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000049f  00000000  00000000  000267e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000154b0  00000000  00000000  00026c7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000052a2  00000000  00000000  0003c12f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00070e26  00000000  00000000  000413d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000018dc  00000000  00000000  000b21f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  000b3ad4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001834 	.word	0x08001834

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08001834 	.word	0x08001834

080001c8 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80001d0:	4b08      	ldr	r3, [pc, #32]	; (80001f4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80001d2:	695a      	ldr	r2, [r3, #20]
 80001d4:	4907      	ldr	r1, [pc, #28]	; (80001f4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	4313      	orrs	r3, r2
 80001da:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80001de:	695a      	ldr	r2, [r3, #20]
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	4013      	ands	r3, r2
 80001e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001e6:	68fb      	ldr	r3, [r7, #12]
}
 80001e8:	bf00      	nop
 80001ea:	3714      	adds	r7, #20
 80001ec:	46bd      	mov	sp, r7
 80001ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f2:	4770      	bx	lr
 80001f4:	40021000 	.word	0x40021000

080001f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80001fc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000200:	f7ff ffe2 	bl	80001c8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000204:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000208:	f7ff ffde 	bl	80001c8 <LL_AHB1_GRP1_EnableClock>

}
 800020c:	bf00      	nop
 800020e:	bd80      	pop	{r7, pc}

08000210 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000210:	b480      	push	{r7}
 8000212:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000214:	4b04      	ldr	r3, [pc, #16]	; (8000228 <__NVIC_GetPriorityGrouping+0x18>)
 8000216:	68db      	ldr	r3, [r3, #12]
 8000218:	0a1b      	lsrs	r3, r3, #8
 800021a:	f003 0307 	and.w	r3, r3, #7
}
 800021e:	4618      	mov	r0, r3
 8000220:	46bd      	mov	sp, r7
 8000222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000226:	4770      	bx	lr
 8000228:	e000ed00 	.word	0xe000ed00

0800022c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800022c:	b480      	push	{r7}
 800022e:	b083      	sub	sp, #12
 8000230:	af00      	add	r7, sp, #0
 8000232:	4603      	mov	r3, r0
 8000234:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800023a:	2b00      	cmp	r3, #0
 800023c:	db0b      	blt.n	8000256 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800023e:	79fb      	ldrb	r3, [r7, #7]
 8000240:	f003 021f 	and.w	r2, r3, #31
 8000244:	4907      	ldr	r1, [pc, #28]	; (8000264 <__NVIC_EnableIRQ+0x38>)
 8000246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800024a:	095b      	lsrs	r3, r3, #5
 800024c:	2001      	movs	r0, #1
 800024e:	fa00 f202 	lsl.w	r2, r0, r2
 8000252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000256:	bf00      	nop
 8000258:	370c      	adds	r7, #12
 800025a:	46bd      	mov	sp, r7
 800025c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000260:	4770      	bx	lr
 8000262:	bf00      	nop
 8000264:	e000e100 	.word	0xe000e100

08000268 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000268:	b480      	push	{r7}
 800026a:	b083      	sub	sp, #12
 800026c:	af00      	add	r7, sp, #0
 800026e:	4603      	mov	r3, r0
 8000270:	6039      	str	r1, [r7, #0]
 8000272:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000278:	2b00      	cmp	r3, #0
 800027a:	db0a      	blt.n	8000292 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027c:	683b      	ldr	r3, [r7, #0]
 800027e:	b2da      	uxtb	r2, r3
 8000280:	490c      	ldr	r1, [pc, #48]	; (80002b4 <__NVIC_SetPriority+0x4c>)
 8000282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000286:	0112      	lsls	r2, r2, #4
 8000288:	b2d2      	uxtb	r2, r2
 800028a:	440b      	add	r3, r1
 800028c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000290:	e00a      	b.n	80002a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000292:	683b      	ldr	r3, [r7, #0]
 8000294:	b2da      	uxtb	r2, r3
 8000296:	4908      	ldr	r1, [pc, #32]	; (80002b8 <__NVIC_SetPriority+0x50>)
 8000298:	79fb      	ldrb	r3, [r7, #7]
 800029a:	f003 030f 	and.w	r3, r3, #15
 800029e:	3b04      	subs	r3, #4
 80002a0:	0112      	lsls	r2, r2, #4
 80002a2:	b2d2      	uxtb	r2, r2
 80002a4:	440b      	add	r3, r1
 80002a6:	761a      	strb	r2, [r3, #24]
}
 80002a8:	bf00      	nop
 80002aa:	370c      	adds	r7, #12
 80002ac:	46bd      	mov	sp, r7
 80002ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b2:	4770      	bx	lr
 80002b4:	e000e100 	.word	0xe000e100
 80002b8:	e000ed00 	.word	0xe000ed00

080002bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80002bc:	b480      	push	{r7}
 80002be:	b089      	sub	sp, #36	; 0x24
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	60f8      	str	r0, [r7, #12]
 80002c4:	60b9      	str	r1, [r7, #8]
 80002c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	f003 0307 	and.w	r3, r3, #7
 80002ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002d0:	69fb      	ldr	r3, [r7, #28]
 80002d2:	f1c3 0307 	rsb	r3, r3, #7
 80002d6:	2b04      	cmp	r3, #4
 80002d8:	bf28      	it	cs
 80002da:	2304      	movcs	r3, #4
 80002dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002de:	69fb      	ldr	r3, [r7, #28]
 80002e0:	3304      	adds	r3, #4
 80002e2:	2b06      	cmp	r3, #6
 80002e4:	d902      	bls.n	80002ec <NVIC_EncodePriority+0x30>
 80002e6:	69fb      	ldr	r3, [r7, #28]
 80002e8:	3b03      	subs	r3, #3
 80002ea:	e000      	b.n	80002ee <NVIC_EncodePriority+0x32>
 80002ec:	2300      	movs	r3, #0
 80002ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80002f4:	69bb      	ldr	r3, [r7, #24]
 80002f6:	fa02 f303 	lsl.w	r3, r2, r3
 80002fa:	43da      	mvns	r2, r3
 80002fc:	68bb      	ldr	r3, [r7, #8]
 80002fe:	401a      	ands	r2, r3
 8000300:	697b      	ldr	r3, [r7, #20]
 8000302:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000304:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000308:	697b      	ldr	r3, [r7, #20]
 800030a:	fa01 f303 	lsl.w	r3, r1, r3
 800030e:	43d9      	mvns	r1, r3
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000314:	4313      	orrs	r3, r2
         );
}
 8000316:	4618      	mov	r0, r3
 8000318:	3724      	adds	r7, #36	; 0x24
 800031a:	46bd      	mov	sp, r7
 800031c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000320:	4770      	bx	lr

08000322 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8000322:	b480      	push	{r7}
 8000324:	b083      	sub	sp, #12
 8000326:	af00      	add	r7, sp, #0
 8000328:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	601a      	str	r2, [r3, #0]
}
 8000336:	bf00      	nop
 8000338:	370c      	adds	r7, #12
 800033a:	46bd      	mov	sp, r7
 800033c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000340:	4770      	bx	lr

08000342 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8000342:	b480      	push	{r7}
 8000344:	b083      	sub	sp, #12
 8000346:	af00      	add	r7, sp, #0
 8000348:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	601a      	str	r2, [r3, #0]
}
 8000356:	bf00      	nop
 8000358:	370c      	adds	r7, #12
 800035a:	46bd      	mov	sp, r7
 800035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000360:	4770      	bx	lr

08000362 <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 8000362:	b480      	push	{r7}
 8000364:	b085      	sub	sp, #20
 8000366:	af00      	add	r7, sp, #0
 8000368:	60f8      	str	r0, [r7, #12]
 800036a:	60b9      	str	r1, [r7, #8]
 800036c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	68db      	ldr	r3, [r3, #12]
 8000372:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000376:	f023 0306 	bic.w	r3, r3, #6
 800037a:	68b9      	ldr	r1, [r7, #8]
 800037c:	687a      	ldr	r2, [r7, #4]
 800037e:	430a      	orrs	r2, r1
 8000380:	431a      	orrs	r2, r3
 8000382:	68fb      	ldr	r3, [r7, #12]
 8000384:	60da      	str	r2, [r3, #12]
}
 8000386:	bf00      	nop
 8000388:	3714      	adds	r7, #20
 800038a:	46bd      	mov	sp, r7
 800038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000390:	4770      	bx	lr

08000392 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 8000392:	b480      	push	{r7}
 8000394:	b083      	sub	sp, #12
 8000396:	af00      	add	r7, sp, #0
 8000398:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	68db      	ldr	r3, [r3, #12]
 800039e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	60da      	str	r2, [r3, #12]
}
 80003a6:	bf00      	nop
 80003a8:	370c      	adds	r7, #12
 80003aa:	46bd      	mov	sp, r7
 80003ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b0:	4770      	bx	lr

080003b2 <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(const I2C_TypeDef *I2Cx)
{
 80003b2:	b480      	push	{r7}
 80003b4:	b083      	sub	sp, #12
 80003b6:	af00      	add	r7, sp, #0
 80003b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	699b      	ldr	r3, [r3, #24]
 80003be:	f003 0304 	and.w	r3, r3, #4
 80003c2:	2b04      	cmp	r3, #4
 80003c4:	d101      	bne.n	80003ca <LL_I2C_IsActiveFlag_RXNE+0x18>
 80003c6:	2301      	movs	r3, #1
 80003c8:	e000      	b.n	80003cc <LL_I2C_IsActiveFlag_RXNE+0x1a>
 80003ca:	2300      	movs	r3, #0
}
 80003cc:	4618      	mov	r0, r3
 80003ce:	370c      	adds	r7, #12
 80003d0:	46bd      	mov	sp, r7
 80003d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d6:	4770      	bx	lr

080003d8 <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 80003d8:	b480      	push	{r7}
 80003da:	b083      	sub	sp, #12
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	685b      	ldr	r3, [r3, #4]
 80003e4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	605a      	str	r2, [r3, #4]
}
 80003ec:	bf00      	nop
 80003ee:	370c      	adds	r7, #12
 80003f0:	46bd      	mov	sp, r7
 80003f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f6:	4770      	bx	lr

080003f8 <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(const I2C_TypeDef *I2Cx)
{
 80003f8:	b480      	push	{r7}
 80003fa:	b083      	sub	sp, #12
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000404:	b2db      	uxtb	r3, r3
}
 8000406:	4618      	mov	r0, r3
 8000408:	370c      	adds	r7, #12
 800040a:	46bd      	mov	sp, r7
 800040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000410:	4770      	bx	lr
	...

08000414 <LL_AHB1_GRP1_EnableClock>:
{
 8000414:	b480      	push	{r7}
 8000416:	b085      	sub	sp, #20
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 800041c:	4b08      	ldr	r3, [pc, #32]	; (8000440 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800041e:	695a      	ldr	r2, [r3, #20]
 8000420:	4907      	ldr	r1, [pc, #28]	; (8000440 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	4313      	orrs	r3, r2
 8000426:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000428:	4b05      	ldr	r3, [pc, #20]	; (8000440 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800042a:	695a      	ldr	r2, [r3, #20]
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	4013      	ands	r3, r2
 8000430:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000432:	68fb      	ldr	r3, [r7, #12]
}
 8000434:	bf00      	nop
 8000436:	3714      	adds	r7, #20
 8000438:	46bd      	mov	sp, r7
 800043a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043e:	4770      	bx	lr
 8000440:	40021000 	.word	0x40021000

08000444 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000444:	b480      	push	{r7}
 8000446:	b085      	sub	sp, #20
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800044c:	4b08      	ldr	r3, [pc, #32]	; (8000470 <LL_APB1_GRP1_EnableClock+0x2c>)
 800044e:	69da      	ldr	r2, [r3, #28]
 8000450:	4907      	ldr	r1, [pc, #28]	; (8000470 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	4313      	orrs	r3, r2
 8000456:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000458:	4b05      	ldr	r3, [pc, #20]	; (8000470 <LL_APB1_GRP1_EnableClock+0x2c>)
 800045a:	69da      	ldr	r2, [r3, #28]
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	4013      	ands	r3, r2
 8000460:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000462:	68fb      	ldr	r3, [r7, #12]
}
 8000464:	bf00      	nop
 8000466:	3714      	adds	r7, #20
 8000468:	46bd      	mov	sp, r7
 800046a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046e:	4770      	bx	lr
 8000470:	40021000 	.word	0x40021000

08000474 <MX_I2C1_Init>:
uint8_t i2c_rx_data = 0;
/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b08e      	sub	sp, #56	; 0x38
 8000478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 800047a:	f107 031c 	add.w	r3, r7, #28
 800047e:	2200      	movs	r2, #0
 8000480:	601a      	str	r2, [r3, #0]
 8000482:	605a      	str	r2, [r3, #4]
 8000484:	609a      	str	r2, [r3, #8]
 8000486:	60da      	str	r2, [r3, #12]
 8000488:	611a      	str	r2, [r3, #16]
 800048a:	615a      	str	r2, [r3, #20]
 800048c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800048e:	1d3b      	adds	r3, r7, #4
 8000490:	2200      	movs	r2, #0
 8000492:	601a      	str	r2, [r3, #0]
 8000494:	605a      	str	r2, [r3, #4]
 8000496:	609a      	str	r2, [r3, #8]
 8000498:	60da      	str	r2, [r3, #12]
 800049a:	611a      	str	r2, [r3, #16]
 800049c:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800049e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80004a2:	f7ff ffb7 	bl	8000414 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80004a6:	23c0      	movs	r3, #192	; 0xc0
 80004a8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80004aa:	2302      	movs	r3, #2
 80004ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80004ae:	2303      	movs	r3, #3
 80004b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80004b2:	2301      	movs	r3, #1
 80004b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80004b6:	2300      	movs	r3, #0
 80004b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80004ba:	2304      	movs	r3, #4
 80004bc:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004be:	1d3b      	adds	r3, r7, #4
 80004c0:	4619      	mov	r1, r3
 80004c2:	4820      	ldr	r0, [pc, #128]	; (8000544 <MX_I2C1_Init+0xd0>)
 80004c4:	f000 fd88 	bl	8000fd8 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 80004c8:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80004cc:	f7ff ffba 	bl	8000444 <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80004d0:	f7ff fe9e 	bl	8000210 <__NVIC_GetPriorityGrouping>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2200      	movs	r2, #0
 80004d8:	2100      	movs	r1, #0
 80004da:	4618      	mov	r0, r3
 80004dc:	f7ff feee 	bl	80002bc <NVIC_EncodePriority>
 80004e0:	4603      	mov	r3, r0
 80004e2:	4619      	mov	r1, r3
 80004e4:	201f      	movs	r0, #31
 80004e6:	f7ff febf 	bl	8000268 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 80004ea:	201f      	movs	r0, #31
 80004ec:	f7ff fe9e 	bl	800022c <__NVIC_EnableIRQ>

  /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 80004f0:	4815      	ldr	r0, [pc, #84]	; (8000548 <MX_I2C1_Init+0xd4>)
 80004f2:	f7ff ff71 	bl	80003d8 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 80004f6:	4814      	ldr	r0, [pc, #80]	; (8000548 <MX_I2C1_Init+0xd4>)
 80004f8:	f7ff ff4b 	bl	8000392 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 80004fc:	4812      	ldr	r0, [pc, #72]	; (8000548 <MX_I2C1_Init+0xd4>)
 80004fe:	f7ff ff20 	bl	8000342 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8000502:	4811      	ldr	r0, [pc, #68]	; (8000548 <MX_I2C1_Init+0xd4>)
 8000504:	f7ff ff0d 	bl	8000322 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8000508:	2300      	movs	r3, #0
 800050a:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 800050c:	4b0f      	ldr	r3, [pc, #60]	; (800054c <MX_I2C1_Init+0xd8>)
 800050e:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8000510:	2300      	movs	r3, #0
 8000512:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8000514:	2300      	movs	r3, #0
 8000516:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 2;
 8000518:	2302      	movs	r3, #2
 800051a:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 800051c:	2300      	movs	r3, #0
 800051e:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8000520:	2300      	movs	r3, #0
 8000522:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8000524:	f107 031c 	add.w	r3, r7, #28
 8000528:	4619      	mov	r1, r3
 800052a:	4807      	ldr	r0, [pc, #28]	; (8000548 <MX_I2C1_Init+0xd4>)
 800052c:	f000 fe67 	bl	80011fe <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8000530:	2200      	movs	r2, #0
 8000532:	2100      	movs	r1, #0
 8000534:	4804      	ldr	r0, [pc, #16]	; (8000548 <MX_I2C1_Init+0xd4>)
 8000536:	f7ff ff14 	bl	8000362 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800053a:	bf00      	nop
 800053c:	3738      	adds	r7, #56	; 0x38
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	48000400 	.word	0x48000400
 8000548:	40005400 	.word	0x40005400
 800054c:	2000090e 	.word	0x2000090e

08000550 <I2C1_EV_IRQHandler>:
	LL_I2C_ClearFlag_NACK(I2C1);

	return i2c_rx_data;
}
void I2C1_EV_IRQHandler(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
	if(LL_I2C_IsActiveFlag_RXNE(I2C1))
 8000554:	4807      	ldr	r0, [pc, #28]	; (8000574 <I2C1_EV_IRQHandler+0x24>)
 8000556:	f7ff ff2c 	bl	80003b2 <LL_I2C_IsActiveFlag_RXNE>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d006      	beq.n	800056e <I2C1_EV_IRQHandler+0x1e>
		{
			// Call function Master Reception Callback
			i2c_rx_data = LL_I2C_ReceiveData8(I2C1);
 8000560:	4804      	ldr	r0, [pc, #16]	; (8000574 <I2C1_EV_IRQHandler+0x24>)
 8000562:	f7ff ff49 	bl	80003f8 <LL_I2C_ReceiveData8>
 8000566:	4603      	mov	r3, r0
 8000568:	461a      	mov	r2, r3
 800056a:	4b03      	ldr	r3, [pc, #12]	; (8000578 <I2C1_EV_IRQHandler+0x28>)
 800056c:	701a      	strb	r2, [r3, #0]
		}
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800056e:	bf00      	nop
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	40005400 	.word	0x40005400
 8000578:	20000020 	.word	0x20000020

0800057c <__NVIC_SetPriorityGrouping>:
{
 800057c:	b480      	push	{r7}
 800057e:	b085      	sub	sp, #20
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	f003 0307 	and.w	r3, r3, #7
 800058a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800058c:	4b0c      	ldr	r3, [pc, #48]	; (80005c0 <__NVIC_SetPriorityGrouping+0x44>)
 800058e:	68db      	ldr	r3, [r3, #12]
 8000590:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000592:	68ba      	ldr	r2, [r7, #8]
 8000594:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000598:	4013      	ands	r3, r2
 800059a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005a0:	68bb      	ldr	r3, [r7, #8]
 80005a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005ae:	4a04      	ldr	r2, [pc, #16]	; (80005c0 <__NVIC_SetPriorityGrouping+0x44>)
 80005b0:	68bb      	ldr	r3, [r7, #8]
 80005b2:	60d3      	str	r3, [r2, #12]
}
 80005b4:	bf00      	nop
 80005b6:	3714      	adds	r7, #20
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr
 80005c0:	e000ed00 	.word	0xe000ed00

080005c4 <__NVIC_GetPriorityGrouping>:
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005c8:	4b04      	ldr	r3, [pc, #16]	; (80005dc <__NVIC_GetPriorityGrouping+0x18>)
 80005ca:	68db      	ldr	r3, [r3, #12]
 80005cc:	0a1b      	lsrs	r3, r3, #8
 80005ce:	f003 0307 	and.w	r3, r3, #7
}
 80005d2:	4618      	mov	r0, r3
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr
 80005dc:	e000ed00 	.word	0xe000ed00

080005e0 <__NVIC_SetPriority>:
{
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	6039      	str	r1, [r7, #0]
 80005ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	db0a      	blt.n	800060a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	b2da      	uxtb	r2, r3
 80005f8:	490c      	ldr	r1, [pc, #48]	; (800062c <__NVIC_SetPriority+0x4c>)
 80005fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005fe:	0112      	lsls	r2, r2, #4
 8000600:	b2d2      	uxtb	r2, r2
 8000602:	440b      	add	r3, r1
 8000604:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000608:	e00a      	b.n	8000620 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	b2da      	uxtb	r2, r3
 800060e:	4908      	ldr	r1, [pc, #32]	; (8000630 <__NVIC_SetPriority+0x50>)
 8000610:	79fb      	ldrb	r3, [r7, #7]
 8000612:	f003 030f 	and.w	r3, r3, #15
 8000616:	3b04      	subs	r3, #4
 8000618:	0112      	lsls	r2, r2, #4
 800061a:	b2d2      	uxtb	r2, r2
 800061c:	440b      	add	r3, r1
 800061e:	761a      	strb	r2, [r3, #24]
}
 8000620:	bf00      	nop
 8000622:	370c      	adds	r7, #12
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr
 800062c:	e000e100 	.word	0xe000e100
 8000630:	e000ed00 	.word	0xe000ed00

08000634 <NVIC_EncodePriority>:
{
 8000634:	b480      	push	{r7}
 8000636:	b089      	sub	sp, #36	; 0x24
 8000638:	af00      	add	r7, sp, #0
 800063a:	60f8      	str	r0, [r7, #12]
 800063c:	60b9      	str	r1, [r7, #8]
 800063e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	f003 0307 	and.w	r3, r3, #7
 8000646:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000648:	69fb      	ldr	r3, [r7, #28]
 800064a:	f1c3 0307 	rsb	r3, r3, #7
 800064e:	2b04      	cmp	r3, #4
 8000650:	bf28      	it	cs
 8000652:	2304      	movcs	r3, #4
 8000654:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000656:	69fb      	ldr	r3, [r7, #28]
 8000658:	3304      	adds	r3, #4
 800065a:	2b06      	cmp	r3, #6
 800065c:	d902      	bls.n	8000664 <NVIC_EncodePriority+0x30>
 800065e:	69fb      	ldr	r3, [r7, #28]
 8000660:	3b03      	subs	r3, #3
 8000662:	e000      	b.n	8000666 <NVIC_EncodePriority+0x32>
 8000664:	2300      	movs	r3, #0
 8000666:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000668:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800066c:	69bb      	ldr	r3, [r7, #24]
 800066e:	fa02 f303 	lsl.w	r3, r2, r3
 8000672:	43da      	mvns	r2, r3
 8000674:	68bb      	ldr	r3, [r7, #8]
 8000676:	401a      	ands	r2, r3
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800067c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000680:	697b      	ldr	r3, [r7, #20]
 8000682:	fa01 f303 	lsl.w	r3, r1, r3
 8000686:	43d9      	mvns	r1, r3
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800068c:	4313      	orrs	r3, r2
}
 800068e:	4618      	mov	r0, r3
 8000690:	3724      	adds	r7, #36	; 0x24
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
	...

0800069c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80006a0:	4b05      	ldr	r3, [pc, #20]	; (80006b8 <LL_RCC_HSI_Enable+0x1c>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a04      	ldr	r2, [pc, #16]	; (80006b8 <LL_RCC_HSI_Enable+0x1c>)
 80006a6:	f043 0301 	orr.w	r3, r3, #1
 80006aa:	6013      	str	r3, [r2, #0]
}
 80006ac:	bf00      	nop
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	40021000 	.word	0x40021000

080006bc <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80006c0:	4b06      	ldr	r3, [pc, #24]	; (80006dc <LL_RCC_HSI_IsReady+0x20>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f003 0302 	and.w	r3, r3, #2
 80006c8:	2b02      	cmp	r3, #2
 80006ca:	bf0c      	ite	eq
 80006cc:	2301      	moveq	r3, #1
 80006ce:	2300      	movne	r3, #0
 80006d0:	b2db      	uxtb	r3, r3
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	40021000 	.word	0x40021000

080006e0 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80006e8:	4b07      	ldr	r3, [pc, #28]	; (8000708 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	00db      	lsls	r3, r3, #3
 80006f4:	4904      	ldr	r1, [pc, #16]	; (8000708 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80006f6:	4313      	orrs	r3, r2
 80006f8:	600b      	str	r3, [r1, #0]
}
 80006fa:	bf00      	nop
 80006fc:	370c      	adds	r7, #12
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	40021000 	.word	0x40021000

0800070c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000714:	4b06      	ldr	r3, [pc, #24]	; (8000730 <LL_RCC_SetSysClkSource+0x24>)
 8000716:	685b      	ldr	r3, [r3, #4]
 8000718:	f023 0203 	bic.w	r2, r3, #3
 800071c:	4904      	ldr	r1, [pc, #16]	; (8000730 <LL_RCC_SetSysClkSource+0x24>)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	4313      	orrs	r3, r2
 8000722:	604b      	str	r3, [r1, #4]
}
 8000724:	bf00      	nop
 8000726:	370c      	adds	r7, #12
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr
 8000730:	40021000 	.word	0x40021000

08000734 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000738:	4b04      	ldr	r3, [pc, #16]	; (800074c <LL_RCC_GetSysClkSource+0x18>)
 800073a:	685b      	ldr	r3, [r3, #4]
 800073c:	f003 030c 	and.w	r3, r3, #12
}
 8000740:	4618      	mov	r0, r3
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	40021000 	.word	0x40021000

08000750 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000758:	4b06      	ldr	r3, [pc, #24]	; (8000774 <LL_RCC_SetAHBPrescaler+0x24>)
 800075a:	685b      	ldr	r3, [r3, #4]
 800075c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000760:	4904      	ldr	r1, [pc, #16]	; (8000774 <LL_RCC_SetAHBPrescaler+0x24>)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	4313      	orrs	r3, r2
 8000766:	604b      	str	r3, [r1, #4]
}
 8000768:	bf00      	nop
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr
 8000774:	40021000 	.word	0x40021000

08000778 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000780:	4b06      	ldr	r3, [pc, #24]	; (800079c <LL_RCC_SetAPB1Prescaler+0x24>)
 8000782:	685b      	ldr	r3, [r3, #4]
 8000784:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000788:	4904      	ldr	r1, [pc, #16]	; (800079c <LL_RCC_SetAPB1Prescaler+0x24>)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	4313      	orrs	r3, r2
 800078e:	604b      	str	r3, [r1, #4]
}
 8000790:	bf00      	nop
 8000792:	370c      	adds	r7, #12
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr
 800079c:	40021000 	.word	0x40021000

080007a0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80007a8:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <LL_RCC_SetAPB2Prescaler+0x24>)
 80007aa:	685b      	ldr	r3, [r3, #4]
 80007ac:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80007b0:	4904      	ldr	r1, [pc, #16]	; (80007c4 <LL_RCC_SetAPB2Prescaler+0x24>)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	4313      	orrs	r3, r2
 80007b6:	604b      	str	r3, [r1, #4]
}
 80007b8:	bf00      	nop
 80007ba:	370c      	adds	r7, #12
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr
 80007c4:	40021000 	.word	0x40021000

080007c8 <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 80007d0:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <LL_RCC_SetI2CClockSource+0x2c>)
 80007d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	0e1b      	lsrs	r3, r3, #24
 80007d8:	43db      	mvns	r3, r3
 80007da:	401a      	ands	r2, r3
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80007e2:	4904      	ldr	r1, [pc, #16]	; (80007f4 <LL_RCC_SetI2CClockSource+0x2c>)
 80007e4:	4313      	orrs	r3, r2
 80007e6:	630b      	str	r3, [r1, #48]	; 0x30
}
 80007e8:	bf00      	nop
 80007ea:	370c      	adds	r7, #12
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr
 80007f4:	40021000 	.word	0x40021000

080007f8 <LL_APB1_GRP1_EnableClock>:
{
 80007f8:	b480      	push	{r7}
 80007fa:	b085      	sub	sp, #20
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000800:	4b08      	ldr	r3, [pc, #32]	; (8000824 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000802:	69da      	ldr	r2, [r3, #28]
 8000804:	4907      	ldr	r1, [pc, #28]	; (8000824 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	4313      	orrs	r3, r2
 800080a:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800080c:	4b05      	ldr	r3, [pc, #20]	; (8000824 <LL_APB1_GRP1_EnableClock+0x2c>)
 800080e:	69da      	ldr	r2, [r3, #28]
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	4013      	ands	r3, r2
 8000814:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000816:	68fb      	ldr	r3, [r7, #12]
}
 8000818:	bf00      	nop
 800081a:	3714      	adds	r7, #20
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr
 8000824:	40021000 	.word	0x40021000

08000828 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000828:	b480      	push	{r7}
 800082a:	b085      	sub	sp, #20
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000830:	4b08      	ldr	r3, [pc, #32]	; (8000854 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000832:	699a      	ldr	r2, [r3, #24]
 8000834:	4907      	ldr	r1, [pc, #28]	; (8000854 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	4313      	orrs	r3, r2
 800083a:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800083c:	4b05      	ldr	r3, [pc, #20]	; (8000854 <LL_APB2_GRP1_EnableClock+0x2c>)
 800083e:	699a      	ldr	r2, [r3, #24]
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	4013      	ands	r3, r2
 8000844:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000846:	68fb      	ldr	r3, [r7, #12]
}
 8000848:	bf00      	nop
 800084a:	3714      	adds	r7, #20
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr
 8000854:	40021000 	.word	0x40021000

08000858 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000860:	4b06      	ldr	r3, [pc, #24]	; (800087c <LL_FLASH_SetLatency+0x24>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	f023 0207 	bic.w	r2, r3, #7
 8000868:	4904      	ldr	r1, [pc, #16]	; (800087c <LL_FLASH_SetLatency+0x24>)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	4313      	orrs	r3, r2
 800086e:	600b      	str	r3, [r1, #0]
}
 8000870:	bf00      	nop
 8000872:	370c      	adds	r7, #12
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr
 800087c:	40022000 	.word	0x40022000

08000880 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000884:	4b04      	ldr	r3, [pc, #16]	; (8000898 <LL_FLASH_GetLatency+0x18>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f003 0307 	and.w	r3, r3, #7
}
 800088c:	4618      	mov	r0, r3
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	40022000 	.word	0x40022000

0800089c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80008a2:	2001      	movs	r0, #1
 80008a4:	f7ff ffc0 	bl	8000828 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80008a8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80008ac:	f7ff ffa4 	bl	80007f8 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008b0:	2003      	movs	r0, #3
 80008b2:	f7ff fe63 	bl	800057c <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 80008b6:	f7ff fe85 	bl	80005c4 <__NVIC_GetPriorityGrouping>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2200      	movs	r2, #0
 80008be:	210f      	movs	r1, #15
 80008c0:	4618      	mov	r0, r3
 80008c2:	f7ff feb7 	bl	8000634 <NVIC_EncodePriority>
 80008c6:	4603      	mov	r3, r0
 80008c8:	4619      	mov	r1, r3
 80008ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008ce:	f7ff fe87 	bl	80005e0 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008d2:	f000 f80d 	bl	80008f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008d6:	f7ff fc8f 	bl	80001f8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80008da:	f7ff fdcb 	bl	8000474 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80008de:	f000 f9bb 	bl	8000c58 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  uint8_t* barometer_OK = 0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	607b      	str	r3, [r7, #4]
   UART_SEND_DATA(barometer_OK, sizeof(barometer_OK));
 80008e6:	2104      	movs	r1, #4
 80008e8:	6878      	ldr	r0, [r7, #4]
 80008ea:	f000 fa19 	bl	8000d20 <UART_SEND_DATA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008ee:	e7fe      	b.n	80008ee <main+0x52>

080008f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 80008f4:	2000      	movs	r0, #0
 80008f6:	f7ff ffaf 	bl	8000858 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 80008fa:	bf00      	nop
 80008fc:	f7ff ffc0 	bl	8000880 <LL_FLASH_GetLatency>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d1fa      	bne.n	80008fc <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 8000906:	f7ff fec9 	bl	800069c <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 800090a:	bf00      	nop
 800090c:	f7ff fed6 	bl	80006bc <LL_RCC_HSI_IsReady>
 8000910:	4603      	mov	r3, r0
 8000912:	2b01      	cmp	r3, #1
 8000914:	d1fa      	bne.n	800090c <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8000916:	2010      	movs	r0, #16
 8000918:	f7ff fee2 	bl	80006e0 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800091c:	2000      	movs	r0, #0
 800091e:	f7ff ff17 	bl	8000750 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000922:	2000      	movs	r0, #0
 8000924:	f7ff ff28 	bl	8000778 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000928:	2000      	movs	r0, #0
 800092a:	f7ff ff39 	bl	80007a0 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 800092e:	2000      	movs	r0, #0
 8000930:	f7ff feec 	bl	800070c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8000934:	bf00      	nop
 8000936:	f7ff fefd 	bl	8000734 <LL_RCC_GetSysClkSource>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d1fa      	bne.n	8000936 <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 8000940:	4805      	ldr	r0, [pc, #20]	; (8000958 <SystemClock_Config+0x68>)
 8000942:	f000 ff35 	bl	80017b0 <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 8000946:	4804      	ldr	r0, [pc, #16]	; (8000958 <SystemClock_Config+0x68>)
 8000948:	f000 ff40 	bl	80017cc <LL_SetSystemCoreClock>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 800094c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000950:	f7ff ff3a 	bl	80007c8 <LL_RCC_SetI2CClockSource>
}
 8000954:	bf00      	nop
 8000956:	bd80      	pop	{r7, pc}
 8000958:	007a1200 	.word	0x007a1200

0800095c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000960:	e7fe      	b.n	8000960 <NMI_Handler+0x4>

08000962 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000966:	e7fe      	b.n	8000966 <HardFault_Handler+0x4>

08000968 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800096c:	e7fe      	b.n	800096c <MemManage_Handler+0x4>

0800096e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800096e:	b480      	push	{r7}
 8000970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000972:	e7fe      	b.n	8000972 <BusFault_Handler+0x4>

08000974 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000978:	e7fe      	b.n	8000978 <UsageFault_Handler+0x4>

0800097a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800097a:	b480      	push	{r7}
 800097c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800097e:	bf00      	nop
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr

08000988 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr

08000996 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800099a:	bf00      	nop
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr

080009a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr

080009b2 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <SystemInit+0x20>)
 80009c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009ca:	4a05      	ldr	r2, [pc, #20]	; (80009e0 <SystemInit+0x20>)
 80009cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	e000ed00 	.word	0xe000ed00

080009e4 <__NVIC_GetPriorityGrouping>:
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009e8:	4b04      	ldr	r3, [pc, #16]	; (80009fc <__NVIC_GetPriorityGrouping+0x18>)
 80009ea:	68db      	ldr	r3, [r3, #12]
 80009ec:	0a1b      	lsrs	r3, r3, #8
 80009ee:	f003 0307 	and.w	r3, r3, #7
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr
 80009fc:	e000ed00 	.word	0xe000ed00

08000a00 <__NVIC_EnableIRQ>:
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4603      	mov	r3, r0
 8000a08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	db0b      	blt.n	8000a2a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	f003 021f 	and.w	r2, r3, #31
 8000a18:	4907      	ldr	r1, [pc, #28]	; (8000a38 <__NVIC_EnableIRQ+0x38>)
 8000a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1e:	095b      	lsrs	r3, r3, #5
 8000a20:	2001      	movs	r0, #1
 8000a22:	fa00 f202 	lsl.w	r2, r0, r2
 8000a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000a2a:	bf00      	nop
 8000a2c:	370c      	adds	r7, #12
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	e000e100 	.word	0xe000e100

08000a3c <__NVIC_SetPriority>:
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	6039      	str	r1, [r7, #0]
 8000a46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	db0a      	blt.n	8000a66 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	b2da      	uxtb	r2, r3
 8000a54:	490c      	ldr	r1, [pc, #48]	; (8000a88 <__NVIC_SetPriority+0x4c>)
 8000a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5a:	0112      	lsls	r2, r2, #4
 8000a5c:	b2d2      	uxtb	r2, r2
 8000a5e:	440b      	add	r3, r1
 8000a60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000a64:	e00a      	b.n	8000a7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	b2da      	uxtb	r2, r3
 8000a6a:	4908      	ldr	r1, [pc, #32]	; (8000a8c <__NVIC_SetPriority+0x50>)
 8000a6c:	79fb      	ldrb	r3, [r7, #7]
 8000a6e:	f003 030f 	and.w	r3, r3, #15
 8000a72:	3b04      	subs	r3, #4
 8000a74:	0112      	lsls	r2, r2, #4
 8000a76:	b2d2      	uxtb	r2, r2
 8000a78:	440b      	add	r3, r1
 8000a7a:	761a      	strb	r2, [r3, #24]
}
 8000a7c:	bf00      	nop
 8000a7e:	370c      	adds	r7, #12
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr
 8000a88:	e000e100 	.word	0xe000e100
 8000a8c:	e000ed00 	.word	0xe000ed00

08000a90 <NVIC_EncodePriority>:
{
 8000a90:	b480      	push	{r7}
 8000a92:	b089      	sub	sp, #36	; 0x24
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	60f8      	str	r0, [r7, #12]
 8000a98:	60b9      	str	r1, [r7, #8]
 8000a9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	f003 0307 	and.w	r3, r3, #7
 8000aa2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aa4:	69fb      	ldr	r3, [r7, #28]
 8000aa6:	f1c3 0307 	rsb	r3, r3, #7
 8000aaa:	2b04      	cmp	r3, #4
 8000aac:	bf28      	it	cs
 8000aae:	2304      	movcs	r3, #4
 8000ab0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ab2:	69fb      	ldr	r3, [r7, #28]
 8000ab4:	3304      	adds	r3, #4
 8000ab6:	2b06      	cmp	r3, #6
 8000ab8:	d902      	bls.n	8000ac0 <NVIC_EncodePriority+0x30>
 8000aba:	69fb      	ldr	r3, [r7, #28]
 8000abc:	3b03      	subs	r3, #3
 8000abe:	e000      	b.n	8000ac2 <NVIC_EncodePriority+0x32>
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ac8:	69bb      	ldr	r3, [r7, #24]
 8000aca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ace:	43da      	mvns	r2, r3
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	401a      	ands	r2, r3
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ad8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae2:	43d9      	mvns	r1, r3
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae8:	4313      	orrs	r3, r2
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3724      	adds	r7, #36	; 0x24
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
	...

08000af8 <LL_AHB1_GRP1_EnableClock>:
{
 8000af8:	b480      	push	{r7}
 8000afa:	b085      	sub	sp, #20
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000b00:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000b02:	695a      	ldr	r2, [r3, #20]
 8000b04:	4907      	ldr	r1, [pc, #28]	; (8000b24 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000b0c:	4b05      	ldr	r3, [pc, #20]	; (8000b24 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000b0e:	695a      	ldr	r2, [r3, #20]
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	4013      	ands	r3, r2
 8000b14:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b16:	68fb      	ldr	r3, [r7, #12]
}
 8000b18:	bf00      	nop
 8000b1a:	3714      	adds	r7, #20
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr
 8000b24:	40021000 	.word	0x40021000

08000b28 <LL_APB1_GRP1_EnableClock>:
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000b30:	4b08      	ldr	r3, [pc, #32]	; (8000b54 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000b32:	69da      	ldr	r2, [r3, #28]
 8000b34:	4907      	ldr	r1, [pc, #28]	; (8000b54 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000b3c:	4b05      	ldr	r3, [pc, #20]	; (8000b54 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000b3e:	69da      	ldr	r2, [r3, #28]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	4013      	ands	r3, r2
 8000b44:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b46:	68fb      	ldr	r3, [r7, #12]
}
 8000b48:	bf00      	nop
 8000b4a:	3714      	adds	r7, #20
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	40021000 	.word	0x40021000

08000b58 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f043 0201 	orr.w	r2, r3, #1
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	601a      	str	r2, [r3, #0]
}
 8000b6c:	bf00      	nop
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	689b      	ldr	r3, [r3, #8]
 8000b90:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	609a      	str	r2, [r3, #8]
}
 8000b98:	bf00      	nop
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr

08000ba4 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	69db      	ldr	r3, [r3, #28]
 8000bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bb4:	2b40      	cmp	r3, #64	; 0x40
 8000bb6:	d101      	bne.n	8000bbc <LL_USART_IsActiveFlag_TC+0x18>
 8000bb8:	2301      	movs	r3, #1
 8000bba:	e000      	b.n	8000bbe <LL_USART_IsActiveFlag_TC+0x1a>
 8000bbc:	2300      	movs	r3, #0
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	370c      	adds	r7, #12
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr

08000bca <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	b083      	sub	sp, #12
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	69db      	ldr	r3, [r3, #28]
 8000bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bda:	2b80      	cmp	r3, #128	; 0x80
 8000bdc:	d101      	bne.n	8000be2 <LL_USART_IsActiveFlag_TXE+0x18>
 8000bde:	2301      	movs	r3, #1
 8000be0:	e000      	b.n	8000be4 <LL_USART_IsActiveFlag_TXE+0x1a>
 8000be2:	2300      	movs	r3, #0
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr

08000bf0 <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b089      	sub	sp, #36	; 0x24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	3308      	adds	r3, #8
 8000bfc:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	e853 3f00 	ldrex	r3, [r3]
 8000c04:	60bb      	str	r3, [r7, #8]
   return(result);
 8000c06:	68bb      	ldr	r3, [r7, #8]
 8000c08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000c0c:	61fb      	str	r3, [r7, #28]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	3308      	adds	r3, #8
 8000c12:	69fa      	ldr	r2, [r7, #28]
 8000c14:	61ba      	str	r2, [r7, #24]
 8000c16:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000c18:	6979      	ldr	r1, [r7, #20]
 8000c1a:	69ba      	ldr	r2, [r7, #24]
 8000c1c:	e841 2300 	strex	r3, r2, [r1]
 8000c20:	613b      	str	r3, [r7, #16]
   return(result);
 8000c22:	693b      	ldr	r3, [r7, #16]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d1e7      	bne.n	8000bf8 <LL_USART_DisableIT_CTS+0x8>
}
 8000c28:	bf00      	nop
 8000c2a:	bf00      	nop
 8000c2c:	3724      	adds	r7, #36	; 0x24
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr

08000c36 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8000c36:	b480      	push	{r7}
 8000c38:	b083      	sub	sp, #12
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	6078      	str	r0, [r7, #4]
 8000c3e:	460b      	mov	r3, r1
 8000c40:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 8000c42:	78fb      	ldrb	r3, [r7, #3]
 8000c44:	b29a      	uxth	r2, r3
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8000c4a:	bf00      	nop
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
	...

08000c58 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08e      	sub	sp, #56	; 0x38
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000c5e:	f107 031c 	add.w	r3, r7, #28
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	605a      	str	r2, [r3, #4]
 8000c68:	609a      	str	r2, [r3, #8]
 8000c6a:	60da      	str	r2, [r3, #12]
 8000c6c:	611a      	str	r2, [r3, #16]
 8000c6e:	615a      	str	r2, [r3, #20]
 8000c70:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c72:	1d3b      	adds	r3, r7, #4
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]
 8000c80:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000c82:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000c86:	f7ff ff4f 	bl	8000b28 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000c8a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000c8e:	f7ff ff33 	bl	8000af8 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8000c92:	230c      	movs	r3, #12
 8000c94:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000c96:	2302      	movs	r3, #2
 8000c98:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000c9a:	2303      	movs	r3, #3
 8000c9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000ca6:	2307      	movs	r3, #7
 8000ca8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000caa:	1d3b      	adds	r3, r7, #4
 8000cac:	4619      	mov	r1, r3
 8000cae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cb2:	f000 f991 	bl	8000fd8 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000cb6:	f7ff fe95 	bl	80009e4 <__NVIC_GetPriorityGrouping>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff fee5 	bl	8000a90 <NVIC_EncodePriority>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	4619      	mov	r1, r3
 8000cca:	2026      	movs	r0, #38	; 0x26
 8000ccc:	f7ff feb6 	bl	8000a3c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8000cd0:	2026      	movs	r0, #38	; 0x26
 8000cd2:	f7ff fe95 	bl	8000a00 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000cd6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000cda:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000ce8:	230c      	movs	r3, #12
 8000cea:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000cec:	2300      	movs	r3, #0
 8000cee:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8000cf4:	f107 031c 	add.w	r3, r7, #28
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4808      	ldr	r0, [pc, #32]	; (8000d1c <MX_USART2_UART_Init+0xc4>)
 8000cfc:	f000 fcd2 	bl	80016a4 <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART2);
 8000d00:	4806      	ldr	r0, [pc, #24]	; (8000d1c <MX_USART2_UART_Init+0xc4>)
 8000d02:	f7ff ff75 	bl	8000bf0 <LL_USART_DisableIT_CTS>
  LL_USART_ConfigAsyncMode(USART2);
 8000d06:	4805      	ldr	r0, [pc, #20]	; (8000d1c <MX_USART2_UART_Init+0xc4>)
 8000d08:	f7ff ff36 	bl	8000b78 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8000d0c:	4803      	ldr	r0, [pc, #12]	; (8000d1c <MX_USART2_UART_Init+0xc4>)
 8000d0e:	f7ff ff23 	bl	8000b58 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d12:	bf00      	nop
 8000d14:	3738      	adds	r7, #56	; 0x38
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40004400 	.word	0x40004400

08000d20 <UART_SEND_DATA>:
//    while (!(USART2->SR & USART_SR_TXE)) {}
//
//    // Send data
//    USART2->DR = data;
//}
void UART_SEND_DATA(uint8_t *data, uint16_t size) {
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
 8000d28:	460b      	mov	r3, r1
 8000d2a:	807b      	strh	r3, [r7, #2]
    for (uint16_t i = 0; i < size; i++) {
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	81fb      	strh	r3, [r7, #14]
 8000d30:	e011      	b.n	8000d56 <UART_SEND_DATA+0x36>
        // Wait for the UART transmit data register to be empty
        while (!LL_USART_IsActiveFlag_TXE(USART2)) {}
 8000d32:	bf00      	nop
 8000d34:	4810      	ldr	r0, [pc, #64]	; (8000d78 <UART_SEND_DATA+0x58>)
 8000d36:	f7ff ff48 	bl	8000bca <LL_USART_IsActiveFlag_TXE>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d0f9      	beq.n	8000d34 <UART_SEND_DATA+0x14>

        // Write the data to the UART data register
        LL_USART_TransmitData8(USART2, data[i]);
 8000d40:	89fb      	ldrh	r3, [r7, #14]
 8000d42:	687a      	ldr	r2, [r7, #4]
 8000d44:	4413      	add	r3, r2
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	4619      	mov	r1, r3
 8000d4a:	480b      	ldr	r0, [pc, #44]	; (8000d78 <UART_SEND_DATA+0x58>)
 8000d4c:	f7ff ff73 	bl	8000c36 <LL_USART_TransmitData8>
    for (uint16_t i = 0; i < size; i++) {
 8000d50:	89fb      	ldrh	r3, [r7, #14]
 8000d52:	3301      	adds	r3, #1
 8000d54:	81fb      	strh	r3, [r7, #14]
 8000d56:	89fa      	ldrh	r2, [r7, #14]
 8000d58:	887b      	ldrh	r3, [r7, #2]
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	d3e9      	bcc.n	8000d32 <UART_SEND_DATA+0x12>
    }

    // Wait for all data to be transmitted
    while (!LL_USART_IsActiveFlag_TC(USART2)) {}
 8000d5e:	bf00      	nop
 8000d60:	4805      	ldr	r0, [pc, #20]	; (8000d78 <UART_SEND_DATA+0x58>)
 8000d62:	f7ff ff1f 	bl	8000ba4 <LL_USART_IsActiveFlag_TC>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d0f9      	beq.n	8000d60 <UART_SEND_DATA+0x40>
}
 8000d6c:	bf00      	nop
 8000d6e:	bf00      	nop
 8000d70:	3710      	adds	r7, #16
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40004400 	.word	0x40004400

08000d7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000db4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d80:	f7ff fe1e 	bl	80009c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d84:	480c      	ldr	r0, [pc, #48]	; (8000db8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d86:	490d      	ldr	r1, [pc, #52]	; (8000dbc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d88:	4a0d      	ldr	r2, [pc, #52]	; (8000dc0 <LoopForever+0xe>)
  movs r3, #0
 8000d8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d8c:	e002      	b.n	8000d94 <LoopCopyDataInit>

08000d8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d92:	3304      	adds	r3, #4

08000d94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d98:	d3f9      	bcc.n	8000d8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d9a:	4a0a      	ldr	r2, [pc, #40]	; (8000dc4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d9c:	4c0a      	ldr	r4, [pc, #40]	; (8000dc8 <LoopForever+0x16>)
  movs r3, #0
 8000d9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da0:	e001      	b.n	8000da6 <LoopFillZerobss>

08000da2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000da2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da4:	3204      	adds	r2, #4

08000da6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000da6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da8:	d3fb      	bcc.n	8000da2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000daa:	f000 fd1f 	bl	80017ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dae:	f7ff fd75 	bl	800089c <main>

08000db2 <LoopForever>:

LoopForever:
    b LoopForever
 8000db2:	e7fe      	b.n	8000db2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000db4:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000db8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dbc:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000dc0:	0800186c 	.word	0x0800186c
  ldr r2, =_sbss
 8000dc4:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000dc8:	20000024 	.word	0x20000024

08000dcc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dcc:	e7fe      	b.n	8000dcc <ADC1_2_IRQHandler>

08000dce <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	b089      	sub	sp, #36	; 0x24
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	60f8      	str	r0, [r7, #12]
 8000dd6:	60b9      	str	r1, [r7, #8]
 8000dd8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	68bb      	ldr	r3, [r7, #8]
 8000de0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	fa93 f3a3 	rbit	r3, r3
 8000de8:	613b      	str	r3, [r7, #16]
  return result;
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	fab3 f383 	clz	r3, r3
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	2103      	movs	r1, #3
 8000df6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfa:	43db      	mvns	r3, r3
 8000dfc:	401a      	ands	r2, r3
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	fa93 f3a3 	rbit	r3, r3
 8000e08:	61bb      	str	r3, [r7, #24]
  return result;
 8000e0a:	69bb      	ldr	r3, [r7, #24]
 8000e0c:	fab3 f383 	clz	r3, r3
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	6879      	ldr	r1, [r7, #4]
 8000e16:	fa01 f303 	lsl.w	r3, r1, r3
 8000e1a:	431a      	orrs	r2, r3
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	601a      	str	r2, [r3, #0]
}
 8000e20:	bf00      	nop
 8000e22:	3724      	adds	r7, #36	; 0x24
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b085      	sub	sp, #20
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	60b9      	str	r1, [r7, #8]
 8000e36:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	685a      	ldr	r2, [r3, #4]
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	43db      	mvns	r3, r3
 8000e40:	401a      	ands	r2, r3
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	6879      	ldr	r1, [r7, #4]
 8000e46:	fb01 f303 	mul.w	r3, r1, r3
 8000e4a:	431a      	orrs	r2, r3
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	605a      	str	r2, [r3, #4]
}
 8000e50:	bf00      	nop
 8000e52:	3714      	adds	r7, #20
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr

08000e5c <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b089      	sub	sp, #36	; 0x24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	60f8      	str	r0, [r7, #12]
 8000e64:	60b9      	str	r1, [r7, #8]
 8000e66:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	689a      	ldr	r2, [r3, #8]
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	fa93 f3a3 	rbit	r3, r3
 8000e76:	613b      	str	r3, [r7, #16]
  return result;
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	fab3 f383 	clz	r3, r3
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	2103      	movs	r1, #3
 8000e84:	fa01 f303 	lsl.w	r3, r1, r3
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	401a      	ands	r2, r3
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	fa93 f3a3 	rbit	r3, r3
 8000e96:	61bb      	str	r3, [r7, #24]
  return result;
 8000e98:	69bb      	ldr	r3, [r7, #24]
 8000e9a:	fab3 f383 	clz	r3, r3
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	6879      	ldr	r1, [r7, #4]
 8000ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea8:	431a      	orrs	r2, r3
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8000eae:	bf00      	nop
 8000eb0:	3724      	adds	r7, #36	; 0x24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr

08000eba <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	b089      	sub	sp, #36	; 0x24
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	60f8      	str	r0, [r7, #12]
 8000ec2:	60b9      	str	r1, [r7, #8]
 8000ec4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	68da      	ldr	r2, [r3, #12]
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	fa93 f3a3 	rbit	r3, r3
 8000ed4:	613b      	str	r3, [r7, #16]
  return result;
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	fab3 f383 	clz	r3, r3
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	2103      	movs	r1, #3
 8000ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	401a      	ands	r2, r3
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	fa93 f3a3 	rbit	r3, r3
 8000ef4:	61bb      	str	r3, [r7, #24]
  return result;
 8000ef6:	69bb      	ldr	r3, [r7, #24]
 8000ef8:	fab3 f383 	clz	r3, r3
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	6879      	ldr	r1, [r7, #4]
 8000f02:	fa01 f303 	lsl.w	r3, r1, r3
 8000f06:	431a      	orrs	r2, r3
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	60da      	str	r2, [r3, #12]
}
 8000f0c:	bf00      	nop
 8000f0e:	3724      	adds	r7, #36	; 0x24
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b089      	sub	sp, #36	; 0x24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	6a1a      	ldr	r2, [r3, #32]
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	fa93 f3a3 	rbit	r3, r3
 8000f32:	613b      	str	r3, [r7, #16]
  return result;
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	fab3 f383 	clz	r3, r3
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	210f      	movs	r1, #15
 8000f40:	fa01 f303 	lsl.w	r3, r1, r3
 8000f44:	43db      	mvns	r3, r3
 8000f46:	401a      	ands	r2, r3
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	fa93 f3a3 	rbit	r3, r3
 8000f52:	61bb      	str	r3, [r7, #24]
  return result;
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	fab3 f383 	clz	r3, r3
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	6879      	ldr	r1, [r7, #4]
 8000f60:	fa01 f303 	lsl.w	r3, r1, r3
 8000f64:	431a      	orrs	r2, r3
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8000f6a:	bf00      	nop
 8000f6c:	3724      	adds	r7, #36	; 0x24
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr

08000f76 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000f76:	b480      	push	{r7}
 8000f78:	b089      	sub	sp, #36	; 0x24
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	60f8      	str	r0, [r7, #12]
 8000f7e:	60b9      	str	r1, [r7, #8]
 8000f80:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	0a1b      	lsrs	r3, r3, #8
 8000f8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	fa93 f3a3 	rbit	r3, r3
 8000f92:	613b      	str	r3, [r7, #16]
  return result;
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	fab3 f383 	clz	r3, r3
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	210f      	movs	r1, #15
 8000fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	401a      	ands	r2, r3
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	0a1b      	lsrs	r3, r3, #8
 8000fac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	fa93 f3a3 	rbit	r3, r3
 8000fb4:	61bb      	str	r3, [r7, #24]
  return result;
 8000fb6:	69bb      	ldr	r3, [r7, #24]
 8000fb8:	fab3 f383 	clz	r3, r3
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	6879      	ldr	r1, [r7, #4]
 8000fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc6:	431a      	orrs	r2, r3
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8000fcc:	bf00      	nop
 8000fce:	3724      	adds	r7, #36	; 0x24
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b088      	sub	sp, #32
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	fa93 f3a3 	rbit	r3, r3
 8000fee:	613b      	str	r3, [r7, #16]
  return result;
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	fab3 f383 	clz	r3, r3
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8000ffa:	e051      	b.n	80010a0 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	2101      	movs	r1, #1
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	fa01 f303 	lsl.w	r3, r1, r3
 8001008:	4013      	ands	r3, r2
 800100a:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d043      	beq.n	800109a <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	2b01      	cmp	r3, #1
 8001018:	d003      	beq.n	8001022 <LL_GPIO_Init+0x4a>
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	2b02      	cmp	r3, #2
 8001020:	d10e      	bne.n	8001040 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	461a      	mov	r2, r3
 8001028:	69b9      	ldr	r1, [r7, #24]
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f7ff ff16 	bl	8000e5c <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	6819      	ldr	r1, [r3, #0]
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	461a      	mov	r2, r3
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f7ff fef6 	bl	8000e2c <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	691b      	ldr	r3, [r3, #16]
 8001044:	461a      	mov	r2, r3
 8001046:	69b9      	ldr	r1, [r7, #24]
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f7ff ff36 	bl	8000eba <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	2b02      	cmp	r3, #2
 8001054:	d11a      	bne.n	800108c <LL_GPIO_Init+0xb4>
 8001056:	69bb      	ldr	r3, [r7, #24]
 8001058:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	fa93 f3a3 	rbit	r3, r3
 8001060:	60bb      	str	r3, [r7, #8]
  return result;
 8001062:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001064:	fab3 f383 	clz	r3, r3
 8001068:	b2db      	uxtb	r3, r3
 800106a:	2b07      	cmp	r3, #7
 800106c:	d807      	bhi.n	800107e <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	695b      	ldr	r3, [r3, #20]
 8001072:	461a      	mov	r2, r3
 8001074:	69b9      	ldr	r1, [r7, #24]
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f7ff ff4e 	bl	8000f18 <LL_GPIO_SetAFPin_0_7>
 800107c:	e006      	b.n	800108c <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	695b      	ldr	r3, [r3, #20]
 8001082:	461a      	mov	r2, r3
 8001084:	69b9      	ldr	r1, [r7, #24]
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f7ff ff75 	bl	8000f76 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	461a      	mov	r2, r3
 8001092:	69b9      	ldr	r1, [r7, #24]
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f7ff fe9a 	bl	8000dce <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	3301      	adds	r3, #1
 800109e:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	fa22 f303 	lsr.w	r3, r2, r3
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d1a6      	bne.n	8000ffc <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 80010ae:	2300      	movs	r3, #0
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3720      	adds	r7, #32
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <LL_I2C_Enable>:
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f043 0201 	orr.w	r2, r3, #1
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	601a      	str	r2, [r3, #0]
}
 80010cc:	bf00      	nop
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <LL_I2C_Disable>:
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f023 0201 	bic.w	r2, r3, #1
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	601a      	str	r2, [r3, #0]
}
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <LL_I2C_ConfigFilters>:
{
 80010f8:	b480      	push	{r7}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	0219      	lsls	r1, r3, #8
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	430b      	orrs	r3, r1
 8001114:	431a      	orrs	r2, r3
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	601a      	str	r2, [r3, #0]
}
 800111a:	bf00      	nop
 800111c:	3714      	adds	r7, #20
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr

08001126 <LL_I2C_SetOwnAddress1>:
{
 8001126:	b480      	push	{r7}
 8001128:	b085      	sub	sp, #20
 800112a:	af00      	add	r7, sp, #0
 800112c:	60f8      	str	r0, [r7, #12]
 800112e:	60b9      	str	r1, [r7, #8]
 8001130:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800113a:	f023 0307 	bic.w	r3, r3, #7
 800113e:	68b9      	ldr	r1, [r7, #8]
 8001140:	687a      	ldr	r2, [r7, #4]
 8001142:	430a      	orrs	r2, r1
 8001144:	431a      	orrs	r2, r3
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	609a      	str	r2, [r3, #8]
}
 800114a:	bf00      	nop
 800114c:	3714      	adds	r7, #20
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr

08001156 <LL_I2C_EnableOwnAddress1>:
{
 8001156:	b480      	push	{r7}
 8001158:	b083      	sub	sp, #12
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	609a      	str	r2, [r3, #8]
}
 800116a:	bf00      	nop
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr

08001176 <LL_I2C_DisableOwnAddress1>:
{
 8001176:	b480      	push	{r7}
 8001178:	b083      	sub	sp, #12
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	609a      	str	r2, [r3, #8]
}
 800118a:	bf00      	nop
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr

08001196 <LL_I2C_SetTiming>:
{
 8001196:	b480      	push	{r7}
 8001198:	b083      	sub	sp, #12
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
 800119e:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	683a      	ldr	r2, [r7, #0]
 80011a4:	611a      	str	r2, [r3, #16]
}
 80011a6:	bf00      	nop
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <LL_I2C_SetMode>:
{
 80011b2:	b480      	push	{r7}
 80011b4:	b083      	sub	sp, #12
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
 80011ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	431a      	orrs	r2, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	601a      	str	r2, [r3, #0]
}
 80011cc:	bf00      	nop
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr

080011d8 <LL_I2C_AcknowledgeNextData>:
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	431a      	orrs	r2, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	605a      	str	r2, [r3, #4]
}
 80011f2:	bf00      	nop
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr

080011fe <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, const LL_I2C_InitTypeDef *I2C_InitStruct)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b082      	sub	sp, #8
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
 8001206:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f7ff ff65 	bl	80010d8 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	6899      	ldr	r1, [r3, #8]
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	68db      	ldr	r3, [r3, #12]
 8001216:	461a      	mov	r2, r3
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f7ff ff6d 	bl	80010f8 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	4619      	mov	r1, r3
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f7ff ffb6 	bl	8001196 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f7ff ff44 	bl	80010b8 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f7ff ffa0 	bl	8001176 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	6919      	ldr	r1, [r3, #16]
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	699b      	ldr	r3, [r3, #24]
 800123e:	461a      	mov	r2, r3
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f7ff ff70 	bl	8001126 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	691b      	ldr	r3, [r3, #16]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d002      	beq.n	8001254 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f7ff ff81 	bl	8001156 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4619      	mov	r1, r3
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f7ff ffa9 	bl	80011b2 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	695b      	ldr	r3, [r3, #20]
 8001264:	4619      	mov	r1, r3
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f7ff ffb6 	bl	80011d8 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
	...

08001278 <LL_RCC_HSI_IsReady>:
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800127c:	4b06      	ldr	r3, [pc, #24]	; (8001298 <LL_RCC_HSI_IsReady+0x20>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f003 0302 	and.w	r3, r3, #2
 8001284:	2b02      	cmp	r3, #2
 8001286:	bf0c      	ite	eq
 8001288:	2301      	moveq	r3, #1
 800128a:	2300      	movne	r3, #0
 800128c:	b2db      	uxtb	r3, r3
}
 800128e:	4618      	mov	r0, r3
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	40021000 	.word	0x40021000

0800129c <LL_RCC_LSE_IsReady>:
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 80012a0:	4b06      	ldr	r3, [pc, #24]	; (80012bc <LL_RCC_LSE_IsReady+0x20>)
 80012a2:	6a1b      	ldr	r3, [r3, #32]
 80012a4:	f003 0302 	and.w	r3, r3, #2
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	bf0c      	ite	eq
 80012ac:	2301      	moveq	r3, #1
 80012ae:	2300      	movne	r3, #0
 80012b0:	b2db      	uxtb	r3, r3
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr
 80012bc:	40021000 	.word	0x40021000

080012c0 <LL_RCC_GetSysClkSource>:
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80012c4:	4b04      	ldr	r3, [pc, #16]	; (80012d8 <LL_RCC_GetSysClkSource+0x18>)
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f003 030c 	and.w	r3, r3, #12
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	40021000 	.word	0x40021000

080012dc <LL_RCC_GetAHBPrescaler>:
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80012e0:	4b04      	ldr	r3, [pc, #16]	; (80012f4 <LL_RCC_GetAHBPrescaler+0x18>)
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	40021000 	.word	0x40021000

080012f8 <LL_RCC_GetAPB1Prescaler>:
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80012fc:	4b04      	ldr	r3, [pc, #16]	; (8001310 <LL_RCC_GetAPB1Prescaler+0x18>)
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001304:	4618      	mov	r0, r3
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	40021000 	.word	0x40021000

08001314 <LL_RCC_GetAPB2Prescaler>:
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001318:	4b04      	ldr	r3, [pc, #16]	; (800132c <LL_RCC_GetAPB2Prescaler+0x18>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001320:	4618      	mov	r0, r3
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	40021000 	.word	0x40021000

08001330 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 8001338:	4b07      	ldr	r3, [pc, #28]	; (8001358 <LL_RCC_GetUSARTClockSource+0x28>)
 800133a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800133c:	2103      	movs	r1, #3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	fa01 f303 	lsl.w	r3, r1, r3
 8001344:	401a      	ands	r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	061b      	lsls	r3, r3, #24
 800134a:	4313      	orrs	r3, r2
}
 800134c:	4618      	mov	r0, r3
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	40021000 	.word	0x40021000

0800135c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8001360:	4b04      	ldr	r3, [pc, #16]	; (8001374 <LL_RCC_PLL_GetMainSource+0x18>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 8001368:	4618      	mov	r0, r3
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	40021000 	.word	0x40021000

08001378 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 800137c:	4b04      	ldr	r3, [pc, #16]	; (8001390 <LL_RCC_PLL_GetMultiplicator+0x18>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8001384:	4618      	mov	r0, r3
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	40021000 	.word	0x40021000

08001394 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8001398:	4b04      	ldr	r3, [pc, #16]	; (80013ac <LL_RCC_PLL_GetPrediv+0x18>)
 800139a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800139c:	f003 030f 	and.w	r3, r3, #15
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	40021000 	.word	0x40021000

080013b0 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80013b8:	f000 f862 	bl	8001480 <RCC_GetSystemClockFreq>
 80013bc:	4602      	mov	r2, r0
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f000 f880 	bl	80014cc <RCC_GetHCLKClockFreq>
 80013cc:	4602      	mov	r2, r0
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f000 f88e 	bl	80014f8 <RCC_GetPCLK1ClockFreq>
 80013dc:	4602      	mov	r2, r0
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f000 f89a 	bl	8001520 <RCC_GetPCLK2ClockFreq>
 80013ec:	4602      	mov	r2, r0
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	60da      	str	r2, [r3, #12]
}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
	...

080013fc <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8001404:	2300      	movs	r3, #0
 8001406:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d130      	bne.n	8001470 <LL_RCC_GetUSARTClockFreq+0x74>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f7ff ff8e 	bl	8001330 <LL_RCC_GetUSARTClockSource>
 8001414:	4603      	mov	r3, r0
 8001416:	2b03      	cmp	r3, #3
 8001418:	d00a      	beq.n	8001430 <LL_RCC_GetUSARTClockFreq+0x34>
 800141a:	2b03      	cmp	r3, #3
 800141c:	d819      	bhi.n	8001452 <LL_RCC_GetUSARTClockFreq+0x56>
 800141e:	2b01      	cmp	r3, #1
 8001420:	d002      	beq.n	8001428 <LL_RCC_GetUSARTClockFreq+0x2c>
 8001422:	2b02      	cmp	r3, #2
 8001424:	d00c      	beq.n	8001440 <LL_RCC_GetUSARTClockFreq+0x44>
 8001426:	e014      	b.n	8001452 <LL_RCC_GetUSARTClockFreq+0x56>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8001428:	f000 f82a 	bl	8001480 <RCC_GetSystemClockFreq>
 800142c:	60f8      	str	r0, [r7, #12]
        break;
 800142e:	e01f      	b.n	8001470 <LL_RCC_GetUSARTClockFreq+0x74>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8001430:	f7ff ff22 	bl	8001278 <LL_RCC_HSI_IsReady>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d017      	beq.n	800146a <LL_RCC_GetUSARTClockFreq+0x6e>
        {
          usart_frequency = HSI_VALUE;
 800143a:	4b10      	ldr	r3, [pc, #64]	; (800147c <LL_RCC_GetUSARTClockFreq+0x80>)
 800143c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800143e:	e014      	b.n	800146a <LL_RCC_GetUSARTClockFreq+0x6e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8001440:	f7ff ff2c 	bl	800129c <LL_RCC_LSE_IsReady>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d011      	beq.n	800146e <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = LSE_VALUE;
 800144a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800144e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001450:	e00d      	b.n	800146e <LL_RCC_GetUSARTClockFreq+0x72>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001452:	f000 f815 	bl	8001480 <RCC_GetSystemClockFreq>
 8001456:	4603      	mov	r3, r0
 8001458:	4618      	mov	r0, r3
 800145a:	f000 f837 	bl	80014cc <RCC_GetHCLKClockFreq>
 800145e:	4603      	mov	r3, r0
 8001460:	4618      	mov	r0, r3
 8001462:	f000 f849 	bl	80014f8 <RCC_GetPCLK1ClockFreq>
 8001466:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 8001468:	e002      	b.n	8001470 <LL_RCC_GetUSARTClockFreq+0x74>
        break;
 800146a:	bf00      	nop
 800146c:	e000      	b.n	8001470 <LL_RCC_GetUSARTClockFreq+0x74>
        break;
 800146e:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 8001470:	68fb      	ldr	r3, [r7, #12]
}
 8001472:	4618      	mov	r0, r3
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	007a1200 	.word	0x007a1200

08001480 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8001486:	2300      	movs	r3, #0
 8001488:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800148a:	f7ff ff19 	bl	80012c0 <LL_RCC_GetSysClkSource>
 800148e:	4603      	mov	r3, r0
 8001490:	2b08      	cmp	r3, #8
 8001492:	d00c      	beq.n	80014ae <RCC_GetSystemClockFreq+0x2e>
 8001494:	2b08      	cmp	r3, #8
 8001496:	d80e      	bhi.n	80014b6 <RCC_GetSystemClockFreq+0x36>
 8001498:	2b00      	cmp	r3, #0
 800149a:	d002      	beq.n	80014a2 <RCC_GetSystemClockFreq+0x22>
 800149c:	2b04      	cmp	r3, #4
 800149e:	d003      	beq.n	80014a8 <RCC_GetSystemClockFreq+0x28>
 80014a0:	e009      	b.n	80014b6 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80014a2:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <RCC_GetSystemClockFreq+0x48>)
 80014a4:	607b      	str	r3, [r7, #4]
      break;
 80014a6:	e009      	b.n	80014bc <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80014a8:	4b07      	ldr	r3, [pc, #28]	; (80014c8 <RCC_GetSystemClockFreq+0x48>)
 80014aa:	607b      	str	r3, [r7, #4]
      break;
 80014ac:	e006      	b.n	80014bc <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80014ae:	f000 f84b 	bl	8001548 <RCC_PLL_GetFreqDomain_SYS>
 80014b2:	6078      	str	r0, [r7, #4]
      break;
 80014b4:	e002      	b.n	80014bc <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 80014b6:	4b04      	ldr	r3, [pc, #16]	; (80014c8 <RCC_GetSystemClockFreq+0x48>)
 80014b8:	607b      	str	r3, [r7, #4]
      break;
 80014ba:	bf00      	nop
  }

  return frequency;
 80014bc:	687b      	ldr	r3, [r7, #4]
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	007a1200 	.word	0x007a1200

080014cc <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80014d4:	f7ff ff02 	bl	80012dc <LL_RCC_GetAHBPrescaler>
 80014d8:	4603      	mov	r3, r0
 80014da:	091b      	lsrs	r3, r3, #4
 80014dc:	f003 030f 	and.w	r3, r3, #15
 80014e0:	4a04      	ldr	r2, [pc, #16]	; (80014f4 <RCC_GetHCLKClockFreq+0x28>)
 80014e2:	5cd3      	ldrb	r3, [r2, r3]
 80014e4:	461a      	mov	r2, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	40d3      	lsrs	r3, r2
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	0800184c 	.word	0x0800184c

080014f8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001500:	f7ff fefa 	bl	80012f8 <LL_RCC_GetAPB1Prescaler>
 8001504:	4603      	mov	r3, r0
 8001506:	0a1b      	lsrs	r3, r3, #8
 8001508:	4a04      	ldr	r2, [pc, #16]	; (800151c <RCC_GetPCLK1ClockFreq+0x24>)
 800150a:	5cd3      	ldrb	r3, [r2, r3]
 800150c:	461a      	mov	r2, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	40d3      	lsrs	r3, r2
}
 8001512:	4618      	mov	r0, r3
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	0800185c 	.word	0x0800185c

08001520 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001528:	f7ff fef4 	bl	8001314 <LL_RCC_GetAPB2Prescaler>
 800152c:	4603      	mov	r3, r0
 800152e:	0adb      	lsrs	r3, r3, #11
 8001530:	4a04      	ldr	r2, [pc, #16]	; (8001544 <RCC_GetPCLK2ClockFreq+0x24>)
 8001532:	5cd3      	ldrb	r3, [r2, r3]
 8001534:	461a      	mov	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	40d3      	lsrs	r3, r2
}
 800153a:	4618      	mov	r0, r3
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	0800185c 	.word	0x0800185c

08001548 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8001548:	b590      	push	{r4, r7, lr}
 800154a:	b085      	sub	sp, #20
 800154c:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 800154e:	2300      	movs	r3, #0
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	2300      	movs	r3, #0
 8001554:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001556:	f7ff ff01 	bl	800135c <LL_RCC_PLL_GetMainSource>
 800155a:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d004      	beq.n	800156c <RCC_PLL_GetFreqDomain_SYS+0x24>
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001568:	d003      	beq.n	8001572 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 800156a:	e005      	b.n	8001578 <RCC_PLL_GetFreqDomain_SYS+0x30>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 800156c:	4b13      	ldr	r3, [pc, #76]	; (80015bc <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800156e:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8001570:	e005      	b.n	800157e <RCC_PLL_GetFreqDomain_SYS+0x36>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8001572:	4b13      	ldr	r3, [pc, #76]	; (80015c0 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8001574:	60fb      	str	r3, [r7, #12]
      break;
 8001576:	e002      	b.n	800157e <RCC_PLL_GetFreqDomain_SYS+0x36>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 8001578:	4b10      	ldr	r3, [pc, #64]	; (80015bc <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800157a:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 800157c:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 800157e:	f7ff ff09 	bl	8001394 <LL_RCC_PLL_GetPrediv>
 8001582:	4603      	mov	r3, r0
 8001584:	3301      	adds	r3, #1
 8001586:	68fa      	ldr	r2, [r7, #12]
 8001588:	fbb2 f4f3 	udiv	r4, r2, r3
 800158c:	f7ff fef4 	bl	8001378 <LL_RCC_PLL_GetMultiplicator>
 8001590:	4603      	mov	r3, r0
 8001592:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001596:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800159a:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	fa92 f2a2 	rbit	r2, r2
 80015a2:	603a      	str	r2, [r7, #0]
  return result;
 80015a4:	683a      	ldr	r2, [r7, #0]
 80015a6:	fab2 f282 	clz	r2, r2
 80015aa:	b2d2      	uxtb	r2, r2
 80015ac:	40d3      	lsrs	r3, r2
 80015ae:	3302      	adds	r3, #2
 80015b0:	fb04 f303 	mul.w	r3, r4, r3
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3714      	adds	r7, #20
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd90      	pop	{r4, r7, pc}
 80015bc:	003d0900 	.word	0x003d0900
 80015c0:	007a1200 	.word	0x007a1200

080015c4 <LL_USART_IsEnabled>:
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0301 	and.w	r3, r3, #1
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d101      	bne.n	80015dc <LL_USART_IsEnabled+0x18>
 80015d8:	2301      	movs	r3, #1
 80015da:	e000      	b.n	80015de <LL_USART_IsEnabled+0x1a>
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr

080015ea <LL_USART_SetStopBitsLength>:
{
 80015ea:	b480      	push	{r7}
 80015ec:	b083      	sub	sp, #12
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
 80015f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	431a      	orrs	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	605a      	str	r2, [r3, #4]
}
 8001604:	bf00      	nop
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <LL_USART_SetHWFlowCtrl>:
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	431a      	orrs	r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	609a      	str	r2, [r3, #8]
}
 800162a:	bf00      	nop
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr

08001636 <LL_USART_SetBaudRate>:
{
 8001636:	b480      	push	{r7}
 8001638:	b087      	sub	sp, #28
 800163a:	af00      	add	r7, sp, #0
 800163c:	60f8      	str	r0, [r7, #12]
 800163e:	60b9      	str	r1, [r7, #8]
 8001640:	607a      	str	r2, [r7, #4]
 8001642:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800164a:	d11a      	bne.n	8001682 <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	005a      	lsls	r2, r3, #1
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	085b      	lsrs	r3, r3, #1
 8001654:	441a      	add	r2, r3
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	fbb2 f3f3 	udiv	r3, r2, r3
 800165c:	b29b      	uxth	r3, r3
 800165e:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8001660:	697a      	ldr	r2, [r7, #20]
 8001662:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8001666:	4013      	ands	r3, r2
 8001668:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	085b      	lsrs	r3, r3, #1
 800166e:	b29b      	uxth	r3, r3
 8001670:	f003 0307 	and.w	r3, r3, #7
 8001674:	693a      	ldr	r2, [r7, #16]
 8001676:	4313      	orrs	r3, r2
 8001678:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	693a      	ldr	r2, [r7, #16]
 800167e:	60da      	str	r2, [r3, #12]
}
 8001680:	e00a      	b.n	8001698 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	085a      	lsrs	r2, r3, #1
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	441a      	add	r2, r3
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001690:	b29b      	uxth	r3, r3
 8001692:	461a      	mov	r2, r3
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	60da      	str	r2, [r3, #12]
}
 8001698:	bf00      	nop
 800169a:	371c      	adds	r7, #28
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b088      	sub	sp, #32
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80016b2:	2300      	movs	r3, #0
 80016b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f7ff ff84 	bl	80015c4 <LL_USART_IsEnabled>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d14e      	bne.n	8001760 <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	4b29      	ldr	r3, [pc, #164]	; (800176c <LL_USART_Init+0xc8>)
 80016c8:	4013      	ands	r3, r2
 80016ca:	683a      	ldr	r2, [r7, #0]
 80016cc:	6851      	ldr	r1, [r2, #4]
 80016ce:	683a      	ldr	r2, [r7, #0]
 80016d0:	68d2      	ldr	r2, [r2, #12]
 80016d2:	4311      	orrs	r1, r2
 80016d4:	683a      	ldr	r2, [r7, #0]
 80016d6:	6912      	ldr	r2, [r2, #16]
 80016d8:	4311      	orrs	r1, r2
 80016da:	683a      	ldr	r2, [r7, #0]
 80016dc:	6992      	ldr	r2, [r2, #24]
 80016de:	430a      	orrs	r2, r1
 80016e0:	431a      	orrs	r2, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	4619      	mov	r1, r3
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f7ff ff7c 	bl	80015ea <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	695b      	ldr	r3, [r3, #20]
 80016f6:	4619      	mov	r1, r3
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f7ff ff89 	bl	8001610 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a1b      	ldr	r2, [pc, #108]	; (8001770 <LL_USART_Init+0xcc>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d104      	bne.n	8001710 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8001706:	2000      	movs	r0, #0
 8001708:	f7ff fe78 	bl	80013fc <LL_RCC_GetUSARTClockFreq>
 800170c:	61b8      	str	r0, [r7, #24]
 800170e:	e016      	b.n	800173e <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4a18      	ldr	r2, [pc, #96]	; (8001774 <LL_USART_Init+0xd0>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d107      	bne.n	8001728 <LL_USART_Init+0x84>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8001718:	f107 0308 	add.w	r3, r7, #8
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff fe47 	bl	80013b0 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	61bb      	str	r3, [r7, #24]
 8001726:	e00a      	b.n	800173e <LL_USART_Init+0x9a>
#endif /* USART2 Clock selector flag */
    }
    else if (USARTx == USART3)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	4a13      	ldr	r2, [pc, #76]	; (8001778 <LL_USART_Init+0xd4>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d106      	bne.n	800173e <LL_USART_Init+0x9a>
    {
#if defined(RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8001730:	f107 0308 	add.w	r3, r7, #8
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff fe3b 	bl	80013b0 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d00d      	beq.n	8001760 <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d009      	beq.n	8001760 <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 800174c:	2300      	movs	r3, #0
 800174e:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8001758:	69b9      	ldr	r1, [r7, #24]
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f7ff ff6b 	bl	8001636 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8001760:	7ffb      	ldrb	r3, [r7, #31]
}
 8001762:	4618      	mov	r0, r3
 8001764:	3720      	adds	r7, #32
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	efff69f3 	.word	0xefff69f3
 8001770:	40013800 	.word	0x40013800
 8001774:	40004400 	.word	0x40004400
 8001778:	40004800 	.word	0x40004800

0800177c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	fbb2 f3f3 	udiv	r3, r2, r3
 800178e:	4a07      	ldr	r2, [pc, #28]	; (80017ac <LL_InitTick+0x30>)
 8001790:	3b01      	subs	r3, #1
 8001792:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001794:	4b05      	ldr	r3, [pc, #20]	; (80017ac <LL_InitTick+0x30>)
 8001796:	2200      	movs	r2, #0
 8001798:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800179a:	4b04      	ldr	r3, [pc, #16]	; (80017ac <LL_InitTick+0x30>)
 800179c:	2205      	movs	r2, #5
 800179e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80017a0:	bf00      	nop
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	e000e010 	.word	0xe000e010

080017b0 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80017b8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f7ff ffdd 	bl	800177c <LL_InitTick>
}
 80017c2:	bf00      	nop
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
	...

080017cc <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80017d4:	4a04      	ldr	r2, [pc, #16]	; (80017e8 <LL_SetSystemCoreClock+0x1c>)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6013      	str	r3, [r2, #0]
}
 80017da:	bf00      	nop
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	20000000 	.word	0x20000000

080017ec <__libc_init_array>:
 80017ec:	b570      	push	{r4, r5, r6, lr}
 80017ee:	4d0d      	ldr	r5, [pc, #52]	; (8001824 <__libc_init_array+0x38>)
 80017f0:	4c0d      	ldr	r4, [pc, #52]	; (8001828 <__libc_init_array+0x3c>)
 80017f2:	1b64      	subs	r4, r4, r5
 80017f4:	10a4      	asrs	r4, r4, #2
 80017f6:	2600      	movs	r6, #0
 80017f8:	42a6      	cmp	r6, r4
 80017fa:	d109      	bne.n	8001810 <__libc_init_array+0x24>
 80017fc:	4d0b      	ldr	r5, [pc, #44]	; (800182c <__libc_init_array+0x40>)
 80017fe:	4c0c      	ldr	r4, [pc, #48]	; (8001830 <__libc_init_array+0x44>)
 8001800:	f000 f818 	bl	8001834 <_init>
 8001804:	1b64      	subs	r4, r4, r5
 8001806:	10a4      	asrs	r4, r4, #2
 8001808:	2600      	movs	r6, #0
 800180a:	42a6      	cmp	r6, r4
 800180c:	d105      	bne.n	800181a <__libc_init_array+0x2e>
 800180e:	bd70      	pop	{r4, r5, r6, pc}
 8001810:	f855 3b04 	ldr.w	r3, [r5], #4
 8001814:	4798      	blx	r3
 8001816:	3601      	adds	r6, #1
 8001818:	e7ee      	b.n	80017f8 <__libc_init_array+0xc>
 800181a:	f855 3b04 	ldr.w	r3, [r5], #4
 800181e:	4798      	blx	r3
 8001820:	3601      	adds	r6, #1
 8001822:	e7f2      	b.n	800180a <__libc_init_array+0x1e>
 8001824:	08001864 	.word	0x08001864
 8001828:	08001864 	.word	0x08001864
 800182c:	08001864 	.word	0x08001864
 8001830:	08001868 	.word	0x08001868

08001834 <_init>:
 8001834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001836:	bf00      	nop
 8001838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800183a:	bc08      	pop	{r3}
 800183c:	469e      	mov	lr, r3
 800183e:	4770      	bx	lr

08001840 <_fini>:
 8001840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001842:	bf00      	nop
 8001844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001846:	bc08      	pop	{r3}
 8001848:	469e      	mov	lr, r3
 800184a:	4770      	bx	lr
