
i2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020ac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  0800223c  0800223c  0001223c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002270  08002270  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08002270  08002270  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002270  08002270  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002270  08002270  00012270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002274  08002274  00012274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08002278  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
 10 .bss          00000170  20000060  20000060  00020060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001d0  200001d0  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 14 .debug_info   00003c00  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001062  00000000  00000000  00023cd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000520  00000000  00000000  00024d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000003a9  00000000  00000000  00025258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000160a6  00000000  00000000  00025601  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000474c  00000000  00000000  0003b6a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000749d0  00000000  00000000  0003fdf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001afc  00000000  00000000  000b47c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  000b62c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002224 	.word	0x08002224

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08002224 	.word	0x08002224

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000270:	b480      	push	{r7}
 8000272:	b085      	sub	sp, #20
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000278:	4b08      	ldr	r3, [pc, #32]	; (800029c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800027a:	695a      	ldr	r2, [r3, #20]
 800027c:	4907      	ldr	r1, [pc, #28]	; (800029c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	4313      	orrs	r3, r2
 8000282:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000284:	4b05      	ldr	r3, [pc, #20]	; (800029c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000286:	695a      	ldr	r2, [r3, #20]
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	4013      	ands	r3, r2
 800028c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800028e:	68fb      	ldr	r3, [r7, #12]
}
 8000290:	bf00      	nop
 8000292:	3714      	adds	r7, #20
 8000294:	46bd      	mov	sp, r7
 8000296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029a:	4770      	bx	lr
 800029c:	40021000 	.word	0x40021000

080002a0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80002a4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80002a8:	f7ff ffe2 	bl	8000270 <LL_AHB1_GRP1_EnableClock>

}
 80002ac:	bf00      	nop
 80002ae:	bd80      	pop	{r7, pc}

080002b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__NVIC_GetPriorityGrouping+0x18>)
 80002b6:	68db      	ldr	r3, [r3, #12]
 80002b8:	0a1b      	lsrs	r3, r3, #8
 80002ba:	f003 0307 	and.w	r3, r3, #7
}
 80002be:	4618      	mov	r0, r3
 80002c0:	46bd      	mov	sp, r7
 80002c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c6:	4770      	bx	lr
 80002c8:	e000ed00 	.word	0xe000ed00

080002cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002cc:	b480      	push	{r7}
 80002ce:	b083      	sub	sp, #12
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	4603      	mov	r3, r0
 80002d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002da:	2b00      	cmp	r3, #0
 80002dc:	db0b      	blt.n	80002f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002de:	79fb      	ldrb	r3, [r7, #7]
 80002e0:	f003 021f 	and.w	r2, r3, #31
 80002e4:	4907      	ldr	r1, [pc, #28]	; (8000304 <__NVIC_EnableIRQ+0x38>)
 80002e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ea:	095b      	lsrs	r3, r3, #5
 80002ec:	2001      	movs	r0, #1
 80002ee:	fa00 f202 	lsl.w	r2, r0, r2
 80002f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002f6:	bf00      	nop
 80002f8:	370c      	adds	r7, #12
 80002fa:	46bd      	mov	sp, r7
 80002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	e000e100 	.word	0xe000e100

08000308 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000308:	b480      	push	{r7}
 800030a:	b083      	sub	sp, #12
 800030c:	af00      	add	r7, sp, #0
 800030e:	4603      	mov	r3, r0
 8000310:	6039      	str	r1, [r7, #0]
 8000312:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000318:	2b00      	cmp	r3, #0
 800031a:	db0a      	blt.n	8000332 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800031c:	683b      	ldr	r3, [r7, #0]
 800031e:	b2da      	uxtb	r2, r3
 8000320:	490c      	ldr	r1, [pc, #48]	; (8000354 <__NVIC_SetPriority+0x4c>)
 8000322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000326:	0112      	lsls	r2, r2, #4
 8000328:	b2d2      	uxtb	r2, r2
 800032a:	440b      	add	r3, r1
 800032c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000330:	e00a      	b.n	8000348 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000332:	683b      	ldr	r3, [r7, #0]
 8000334:	b2da      	uxtb	r2, r3
 8000336:	4908      	ldr	r1, [pc, #32]	; (8000358 <__NVIC_SetPriority+0x50>)
 8000338:	79fb      	ldrb	r3, [r7, #7]
 800033a:	f003 030f 	and.w	r3, r3, #15
 800033e:	3b04      	subs	r3, #4
 8000340:	0112      	lsls	r2, r2, #4
 8000342:	b2d2      	uxtb	r2, r2
 8000344:	440b      	add	r3, r1
 8000346:	761a      	strb	r2, [r3, #24]
}
 8000348:	bf00      	nop
 800034a:	370c      	adds	r7, #12
 800034c:	46bd      	mov	sp, r7
 800034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000352:	4770      	bx	lr
 8000354:	e000e100 	.word	0xe000e100
 8000358:	e000ed00 	.word	0xe000ed00

0800035c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800035c:	b480      	push	{r7}
 800035e:	b089      	sub	sp, #36	; 0x24
 8000360:	af00      	add	r7, sp, #0
 8000362:	60f8      	str	r0, [r7, #12]
 8000364:	60b9      	str	r1, [r7, #8]
 8000366:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000368:	68fb      	ldr	r3, [r7, #12]
 800036a:	f003 0307 	and.w	r3, r3, #7
 800036e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000370:	69fb      	ldr	r3, [r7, #28]
 8000372:	f1c3 0307 	rsb	r3, r3, #7
 8000376:	2b04      	cmp	r3, #4
 8000378:	bf28      	it	cs
 800037a:	2304      	movcs	r3, #4
 800037c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800037e:	69fb      	ldr	r3, [r7, #28]
 8000380:	3304      	adds	r3, #4
 8000382:	2b06      	cmp	r3, #6
 8000384:	d902      	bls.n	800038c <NVIC_EncodePriority+0x30>
 8000386:	69fb      	ldr	r3, [r7, #28]
 8000388:	3b03      	subs	r3, #3
 800038a:	e000      	b.n	800038e <NVIC_EncodePriority+0x32>
 800038c:	2300      	movs	r3, #0
 800038e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000390:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000394:	69bb      	ldr	r3, [r7, #24]
 8000396:	fa02 f303 	lsl.w	r3, r2, r3
 800039a:	43da      	mvns	r2, r3
 800039c:	68bb      	ldr	r3, [r7, #8]
 800039e:	401a      	ands	r2, r3
 80003a0:	697b      	ldr	r3, [r7, #20]
 80003a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80003a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80003a8:	697b      	ldr	r3, [r7, #20]
 80003aa:	fa01 f303 	lsl.w	r3, r1, r3
 80003ae:	43d9      	mvns	r1, r3
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003b4:	4313      	orrs	r3, r2
         );
}
 80003b6:	4618      	mov	r0, r3
 80003b8:	3724      	adds	r7, #36	; 0x24
 80003ba:	46bd      	mov	sp, r7
 80003bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c0:	4770      	bx	lr

080003c2 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 80003c2:	b480      	push	{r7}
 80003c4:	b083      	sub	sp, #12
 80003c6:	af00      	add	r7, sp, #0
 80003c8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	601a      	str	r2, [r3, #0]
}
 80003d6:	bf00      	nop
 80003d8:	370c      	adds	r7, #12
 80003da:	46bd      	mov	sp, r7
 80003dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e0:	4770      	bx	lr

080003e2 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 80003e2:	b480      	push	{r7}
 80003e4:	b083      	sub	sp, #12
 80003e6:	af00      	add	r7, sp, #0
 80003e8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	601a      	str	r2, [r3, #0]
}
 80003f6:	bf00      	nop
 80003f8:	370c      	adds	r7, #12
 80003fa:	46bd      	mov	sp, r7
 80003fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000400:	4770      	bx	lr

08000402 <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 8000402:	b480      	push	{r7}
 8000404:	b085      	sub	sp, #20
 8000406:	af00      	add	r7, sp, #0
 8000408:	60f8      	str	r0, [r7, #12]
 800040a:	60b9      	str	r1, [r7, #8]
 800040c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 800040e:	68fb      	ldr	r3, [r7, #12]
 8000410:	68db      	ldr	r3, [r3, #12]
 8000412:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000416:	f023 0306 	bic.w	r3, r3, #6
 800041a:	68b9      	ldr	r1, [r7, #8]
 800041c:	687a      	ldr	r2, [r7, #4]
 800041e:	430a      	orrs	r2, r1
 8000420:	431a      	orrs	r2, r3
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	60da      	str	r2, [r3, #12]
}
 8000426:	bf00      	nop
 8000428:	3714      	adds	r7, #20
 800042a:	46bd      	mov	sp, r7
 800042c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000430:	4770      	bx	lr

08000432 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 8000432:	b480      	push	{r7}
 8000434:	b083      	sub	sp, #12
 8000436:	af00      	add	r7, sp, #0
 8000438:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	68db      	ldr	r3, [r3, #12]
 800043e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	60da      	str	r2, [r3, #12]
}
 8000446:	bf00      	nop
 8000448:	370c      	adds	r7, #12
 800044a:	46bd      	mov	sp, r7
 800044c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000450:	4770      	bx	lr

08000452 <LL_I2C_EnableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_EnableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableIT_RX(I2C_TypeDef *I2Cx)
{
 8000452:	b480      	push	{r7}
 8000454:	b083      	sub	sp, #12
 8000456:	af00      	add	r7, sp, #0
 8000458:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	f043 0204 	orr.w	r2, r3, #4
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	601a      	str	r2, [r3, #0]
}
 8000466:	bf00      	nop
 8000468:	370c      	adds	r7, #12
 800046a:	46bd      	mov	sp, r7
 800046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000470:	4770      	bx	lr

08000472 <LL_I2C_DisableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_DisableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableIT_RX(I2C_TypeDef *I2Cx)
{
 8000472:	b480      	push	{r7}
 8000474:	b083      	sub	sp, #12
 8000476:	af00      	add	r7, sp, #0
 8000478:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	f023 0204 	bic.w	r2, r3, #4
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	601a      	str	r2, [r3, #0]
}
 8000486:	bf00      	nop
 8000488:	370c      	adds	r7, #12
 800048a:	46bd      	mov	sp, r7
 800048c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000490:	4770      	bx	lr

08000492 <LL_I2C_IsActiveFlag_TXIS>:
  * @rmtoll ISR          TXIS          LL_I2C_IsActiveFlag_TXIS
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXIS(const I2C_TypeDef *I2Cx)
{
 8000492:	b480      	push	{r7}
 8000494:	b083      	sub	sp, #12
 8000496:	af00      	add	r7, sp, #0
 8000498:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	699b      	ldr	r3, [r3, #24]
 800049e:	f003 0302 	and.w	r3, r3, #2
 80004a2:	2b02      	cmp	r3, #2
 80004a4:	d101      	bne.n	80004aa <LL_I2C_IsActiveFlag_TXIS+0x18>
 80004a6:	2301      	movs	r3, #1
 80004a8:	e000      	b.n	80004ac <LL_I2C_IsActiveFlag_TXIS+0x1a>
 80004aa:	2300      	movs	r3, #0
}
 80004ac:	4618      	mov	r0, r3
 80004ae:	370c      	adds	r7, #12
 80004b0:	46bd      	mov	sp, r7
 80004b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b6:	4770      	bx	lr

080004b8 <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(const I2C_TypeDef *I2Cx)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	699b      	ldr	r3, [r3, #24]
 80004c4:	f003 0304 	and.w	r3, r3, #4
 80004c8:	2b04      	cmp	r3, #4
 80004ca:	d101      	bne.n	80004d0 <LL_I2C_IsActiveFlag_RXNE+0x18>
 80004cc:	2301      	movs	r3, #1
 80004ce:	e000      	b.n	80004d2 <LL_I2C_IsActiveFlag_RXNE+0x1a>
 80004d0:	2300      	movs	r3, #0
}
 80004d2:	4618      	mov	r0, r3
 80004d4:	370c      	adds	r7, #12
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr

080004de <LL_I2C_IsActiveFlag_STOP>:
  * @rmtoll ISR          STOPF         LL_I2C_IsActiveFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_STOP(const I2C_TypeDef *I2Cx)
{
 80004de:	b480      	push	{r7}
 80004e0:	b083      	sub	sp, #12
 80004e2:	af00      	add	r7, sp, #0
 80004e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	699b      	ldr	r3, [r3, #24]
 80004ea:	f003 0320 	and.w	r3, r3, #32
 80004ee:	2b20      	cmp	r3, #32
 80004f0:	d101      	bne.n	80004f6 <LL_I2C_IsActiveFlag_STOP+0x18>
 80004f2:	2301      	movs	r3, #1
 80004f4:	e000      	b.n	80004f8 <LL_I2C_IsActiveFlag_STOP+0x1a>
 80004f6:	2300      	movs	r3, #0
}
 80004f8:	4618      	mov	r0, r3
 80004fa:	370c      	adds	r7, #12
 80004fc:	46bd      	mov	sp, r7
 80004fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000502:	4770      	bx	lr

08000504 <LL_I2C_ClearFlag_NACK>:
  * @rmtoll ICR          NACKCF        LL_I2C_ClearFlag_NACK
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_NACK(I2C_TypeDef *I2Cx)
{
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_NACKCF);
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	69db      	ldr	r3, [r3, #28]
 8000510:	f043 0210 	orr.w	r2, r3, #16
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	61da      	str	r2, [r3, #28]
}
 8000518:	bf00      	nop
 800051a:	370c      	adds	r7, #12
 800051c:	46bd      	mov	sp, r7
 800051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000522:	4770      	bx	lr

08000524 <LL_I2C_ClearFlag_STOP>:
  * @rmtoll ICR          STOPCF        LL_I2C_ClearFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_STOP(I2C_TypeDef *I2Cx)
{
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	69db      	ldr	r3, [r3, #28]
 8000530:	f043 0220 	orr.w	r2, r3, #32
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	61da      	str	r2, [r3, #28]
}
 8000538:	bf00      	nop
 800053a:	370c      	adds	r7, #12
 800053c:	46bd      	mov	sp, r7
 800053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000542:	4770      	bx	lr

08000544 <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	685b      	ldr	r3, [r3, #4]
 8000550:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	605a      	str	r2, [r3, #4]
}
 8000558:	bf00      	nop
 800055a:	370c      	adds	r7, #12
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr

08000564 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 8000564:	b480      	push	{r7}
 8000566:	b085      	sub	sp, #20
 8000568:	af00      	add	r7, sp, #0
 800056a:	60f8      	str	r0, [r7, #12]
 800056c:	60b9      	str	r1, [r7, #8]
 800056e:	607a      	str	r2, [r7, #4]
 8000570:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	685a      	ldr	r2, [r3, #4]
 8000576:	69fb      	ldr	r3, [r7, #28]
 8000578:	0d5b      	lsrs	r3, r3, #21
 800057a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800057e:	4b0b      	ldr	r3, [pc, #44]	; (80005ac <LL_I2C_HandleTransfer+0x48>)
 8000580:	430b      	orrs	r3, r1
 8000582:	43db      	mvns	r3, r3
 8000584:	401a      	ands	r2, r3
 8000586:	68b9      	ldr	r1, [r7, #8]
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	4319      	orrs	r1, r3
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	041b      	lsls	r3, r3, #16
 8000590:	4319      	orrs	r1, r3
 8000592:	69bb      	ldr	r3, [r7, #24]
 8000594:	4319      	orrs	r1, r3
 8000596:	69fb      	ldr	r3, [r7, #28]
 8000598:	430b      	orrs	r3, r1
 800059a:	431a      	orrs	r2, r3
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | (TransferSize << I2C_CR2_NBYTES_Pos) | EndMode | Request);
}
 80005a0:	bf00      	nop
 80005a2:	3714      	adds	r7, #20
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr
 80005ac:	03ff7bff 	.word	0x03ff7bff

080005b0 <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(const I2C_TypeDef *I2Cx)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005bc:	b2db      	uxtb	r3, r3
}
 80005be:	4618      	mov	r0, r3
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr

080005ca <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 80005ca:	b480      	push	{r7}
 80005cc:	b083      	sub	sp, #12
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	6078      	str	r0, [r7, #4]
 80005d2:	460b      	mov	r3, r1
 80005d4:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 80005d6:	78fa      	ldrb	r2, [r7, #3]
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80005dc:	bf00      	nop
 80005de:	370c      	adds	r7, #12
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr

080005e8 <LL_AHB1_GRP1_EnableClock>:
{
 80005e8:	b480      	push	{r7}
 80005ea:	b085      	sub	sp, #20
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80005f0:	4b08      	ldr	r3, [pc, #32]	; (8000614 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80005f2:	695a      	ldr	r2, [r3, #20]
 80005f4:	4907      	ldr	r1, [pc, #28]	; (8000614 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	4313      	orrs	r3, r2
 80005fa:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80005fc:	4b05      	ldr	r3, [pc, #20]	; (8000614 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80005fe:	695a      	ldr	r2, [r3, #20]
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	4013      	ands	r3, r2
 8000604:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000606:	68fb      	ldr	r3, [r7, #12]
}
 8000608:	bf00      	nop
 800060a:	3714      	adds	r7, #20
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr
 8000614:	40021000 	.word	0x40021000

08000618 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000618:	b480      	push	{r7}
 800061a:	b085      	sub	sp, #20
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000620:	4b08      	ldr	r3, [pc, #32]	; (8000644 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000622:	69da      	ldr	r2, [r3, #28]
 8000624:	4907      	ldr	r1, [pc, #28]	; (8000644 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	4313      	orrs	r3, r2
 800062a:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800062c:	4b05      	ldr	r3, [pc, #20]	; (8000644 <LL_APB1_GRP1_EnableClock+0x2c>)
 800062e:	69da      	ldr	r2, [r3, #28]
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	4013      	ands	r3, r2
 8000634:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000636:	68fb      	ldr	r3, [r7, #12]
}
 8000638:	bf00      	nop
 800063a:	3714      	adds	r7, #20
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr
 8000644:	40021000 	.word	0x40021000

08000648 <MX_I2C1_Init>:
uint8_t i2c_rx_data = 0;
/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b08e      	sub	sp, #56	; 0x38
 800064c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 800064e:	f107 031c 	add.w	r3, r7, #28
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	605a      	str	r2, [r3, #4]
 8000658:	609a      	str	r2, [r3, #8]
 800065a:	60da      	str	r2, [r3, #12]
 800065c:	611a      	str	r2, [r3, #16]
 800065e:	615a      	str	r2, [r3, #20]
 8000660:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000662:	1d3b      	adds	r3, r7, #4
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]
 8000670:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000672:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000676:	f7ff ffb7 	bl	80005e8 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800067a:	23c0      	movs	r3, #192	; 0xc0
 800067c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800067e:	2302      	movs	r3, #2
 8000680:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000682:	2303      	movs	r3, #3
 8000684:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000686:	2301      	movs	r3, #1
 8000688:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800068a:	2300      	movs	r3, #0
 800068c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800068e:	2304      	movs	r3, #4
 8000690:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	4619      	mov	r1, r3
 8000696:	4820      	ldr	r0, [pc, #128]	; (8000718 <MX_I2C1_Init+0xd0>)
 8000698:	f000 fce2 	bl	8001060 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 800069c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80006a0:	f7ff ffba 	bl	8000618 <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80006a4:	f7ff fe04 	bl	80002b0 <__NVIC_GetPriorityGrouping>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2200      	movs	r2, #0
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f7ff fe54 	bl	800035c <NVIC_EncodePriority>
 80006b4:	4603      	mov	r3, r0
 80006b6:	4619      	mov	r1, r3
 80006b8:	201f      	movs	r0, #31
 80006ba:	f7ff fe25 	bl	8000308 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 80006be:	201f      	movs	r0, #31
 80006c0:	f7ff fe04 	bl	80002cc <__NVIC_EnableIRQ>

  /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 80006c4:	4815      	ldr	r0, [pc, #84]	; (800071c <MX_I2C1_Init+0xd4>)
 80006c6:	f7ff ff3d 	bl	8000544 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 80006ca:	4814      	ldr	r0, [pc, #80]	; (800071c <MX_I2C1_Init+0xd4>)
 80006cc:	f7ff feb1 	bl	8000432 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 80006d0:	4812      	ldr	r0, [pc, #72]	; (800071c <MX_I2C1_Init+0xd4>)
 80006d2:	f7ff fe86 	bl	80003e2 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 80006d6:	4811      	ldr	r0, [pc, #68]	; (800071c <MX_I2C1_Init+0xd4>)
 80006d8:	f7ff fe73 	bl	80003c2 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 80006dc:	2300      	movs	r3, #0
 80006de:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 80006e0:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <MX_I2C1_Init+0xd8>)
 80006e2:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 80006e4:	2300      	movs	r3, #0
 80006e6:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 80006e8:	2300      	movs	r3, #0
 80006ea:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 2;
 80006ec:	2302      	movs	r3, #2
 80006ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 80006f0:	2300      	movs	r3, #0
 80006f2:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 80006f4:	2300      	movs	r3, #0
 80006f6:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 80006f8:	f107 031c 	add.w	r3, r7, #28
 80006fc:	4619      	mov	r1, r3
 80006fe:	4807      	ldr	r0, [pc, #28]	; (800071c <MX_I2C1_Init+0xd4>)
 8000700:	f000 fdc1 	bl	8001286 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8000704:	2200      	movs	r2, #0
 8000706:	2100      	movs	r1, #0
 8000708:	4804      	ldr	r0, [pc, #16]	; (800071c <MX_I2C1_Init+0xd4>)
 800070a:	f7ff fe7a 	bl	8000402 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800070e:	bf00      	nop
 8000710:	3738      	adds	r7, #56	; 0x38
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	48000400 	.word	0x48000400
 800071c:	40005400 	.word	0x40005400
 8000720:	2000090e 	.word	0x2000090e

08000724 <i2c_master_read_byte>:

/* USER CODE BEGIN 1 */
uint8_t i2c_master_read_byte(uint8_t slave_address, uint8_t register_address)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af02      	add	r7, sp, #8
 800072a:	4603      	mov	r3, r0
 800072c:	460a      	mov	r2, r1
 800072e:	71fb      	strb	r3, [r7, #7]
 8000730:	4613      	mov	r3, r2
 8000732:	71bb      	strb	r3, [r7, #6]
	// Enable It from I2C
	LL_I2C_EnableIT_RX(I2C1);
 8000734:	4825      	ldr	r0, [pc, #148]	; (80007cc <i2c_master_read_byte+0xa8>)
 8000736:	f7ff fe8c 	bl	8000452 <LL_I2C_EnableIT_RX>
	// Initialize communication
	LL_I2C_HandleTransfer(I2C1, slave_address, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 800073a:	79f9      	ldrb	r1, [r7, #7]
 800073c:	4b24      	ldr	r3, [pc, #144]	; (80007d0 <i2c_master_read_byte+0xac>)
 800073e:	9301      	str	r3, [sp, #4]
 8000740:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000744:	9300      	str	r3, [sp, #0]
 8000746:	2301      	movs	r3, #1
 8000748:	2200      	movs	r2, #0
 800074a:	4820      	ldr	r0, [pc, #128]	; (80007cc <i2c_master_read_byte+0xa8>)
 800074c:	f7ff ff0a 	bl	8000564 <LL_I2C_HandleTransfer>
	// Send register address
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8000750:	e00a      	b.n	8000768 <i2c_master_read_byte+0x44>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8000752:	481e      	ldr	r0, [pc, #120]	; (80007cc <i2c_master_read_byte+0xa8>)
 8000754:	f7ff fe9d 	bl	8000492 <LL_I2C_IsActiveFlag_TXIS>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d004      	beq.n	8000768 <i2c_master_read_byte+0x44>
		{
			LL_I2C_TransmitData8(I2C1, register_address);
 800075e:	79bb      	ldrb	r3, [r7, #6]
 8000760:	4619      	mov	r1, r3
 8000762:	481a      	ldr	r0, [pc, #104]	; (80007cc <i2c_master_read_byte+0xa8>)
 8000764:	f7ff ff31 	bl	80005ca <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8000768:	4818      	ldr	r0, [pc, #96]	; (80007cc <i2c_master_read_byte+0xa8>)
 800076a:	f7ff feb8 	bl	80004de <LL_I2C_IsActiveFlag_STOP>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d0ee      	beq.n	8000752 <i2c_master_read_byte+0x2e>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8000774:	4815      	ldr	r0, [pc, #84]	; (80007cc <i2c_master_read_byte+0xa8>)
 8000776:	f7ff fed5 	bl	8000524 <LL_I2C_ClearFlag_STOP>
	while(LL_I2C_IsActiveFlag_STOP(I2C1)){};
 800077a:	bf00      	nop
 800077c:	4813      	ldr	r0, [pc, #76]	; (80007cc <i2c_master_read_byte+0xa8>)
 800077e:	f7ff feae 	bl	80004de <LL_I2C_IsActiveFlag_STOP>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d1f9      	bne.n	800077c <i2c_master_read_byte+0x58>

	// Receive data from slave device
	LL_I2C_HandleTransfer(I2C1, slave_address, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 8000788:	79f9      	ldrb	r1, [r7, #7]
 800078a:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <i2c_master_read_byte+0xb0>)
 800078c:	9301      	str	r3, [sp, #4]
 800078e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000792:	9300      	str	r3, [sp, #0]
 8000794:	2301      	movs	r3, #1
 8000796:	2200      	movs	r2, #0
 8000798:	480c      	ldr	r0, [pc, #48]	; (80007cc <i2c_master_read_byte+0xa8>)
 800079a:	f7ff fee3 	bl	8000564 <LL_I2C_HandleTransfer>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1)){};
 800079e:	bf00      	nop
 80007a0:	480a      	ldr	r0, [pc, #40]	; (80007cc <i2c_master_read_byte+0xa8>)
 80007a2:	f7ff fe9c 	bl	80004de <LL_I2C_IsActiveFlag_STOP>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d0f9      	beq.n	80007a0 <i2c_master_read_byte+0x7c>

	//End of transfer
	LL_I2C_DisableIT_RX(I2C1);
 80007ac:	4807      	ldr	r0, [pc, #28]	; (80007cc <i2c_master_read_byte+0xa8>)
 80007ae:	f7ff fe60 	bl	8000472 <LL_I2C_DisableIT_RX>
	LL_I2C_ClearFlag_STOP(I2C1);
 80007b2:	4806      	ldr	r0, [pc, #24]	; (80007cc <i2c_master_read_byte+0xa8>)
 80007b4:	f7ff feb6 	bl	8000524 <LL_I2C_ClearFlag_STOP>
	LL_I2C_ClearFlag_NACK(I2C1);
 80007b8:	4804      	ldr	r0, [pc, #16]	; (80007cc <i2c_master_read_byte+0xa8>)
 80007ba:	f7ff fea3 	bl	8000504 <LL_I2C_ClearFlag_NACK>

	return i2c_rx_data;
 80007be:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <i2c_master_read_byte+0xb4>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40005400 	.word	0x40005400
 80007d0:	80002000 	.word	0x80002000
 80007d4:	80002400 	.word	0x80002400
 80007d8:	2000007c 	.word	0x2000007c

080007dc <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
	if(LL_I2C_IsActiveFlag_RXNE(I2C1))
 80007e0:	4807      	ldr	r0, [pc, #28]	; (8000800 <I2C1_EV_IRQHandler+0x24>)
 80007e2:	f7ff fe69 	bl	80004b8 <LL_I2C_IsActiveFlag_RXNE>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d006      	beq.n	80007fa <I2C1_EV_IRQHandler+0x1e>
		{
			// Call function Master Reception Callback
			i2c_rx_data = LL_I2C_ReceiveData8(I2C1);
 80007ec:	4804      	ldr	r0, [pc, #16]	; (8000800 <I2C1_EV_IRQHandler+0x24>)
 80007ee:	f7ff fedf 	bl	80005b0 <LL_I2C_ReceiveData8>
 80007f2:	4603      	mov	r3, r0
 80007f4:	461a      	mov	r2, r3
 80007f6:	4b03      	ldr	r3, [pc, #12]	; (8000804 <I2C1_EV_IRQHandler+0x28>)
 80007f8:	701a      	strb	r2, [r3, #0]
		}
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40005400 	.word	0x40005400
 8000804:	2000007c 	.word	0x2000007c

08000808 <__NVIC_SetPriorityGrouping>:
{
 8000808:	b480      	push	{r7}
 800080a:	b085      	sub	sp, #20
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	f003 0307 	and.w	r3, r3, #7
 8000816:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000818:	4b0c      	ldr	r3, [pc, #48]	; (800084c <__NVIC_SetPriorityGrouping+0x44>)
 800081a:	68db      	ldr	r3, [r3, #12]
 800081c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800081e:	68ba      	ldr	r2, [r7, #8]
 8000820:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000824:	4013      	ands	r3, r2
 8000826:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000830:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000834:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000838:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800083a:	4a04      	ldr	r2, [pc, #16]	; (800084c <__NVIC_SetPriorityGrouping+0x44>)
 800083c:	68bb      	ldr	r3, [r7, #8]
 800083e:	60d3      	str	r3, [r2, #12]
}
 8000840:	bf00      	nop
 8000842:	3714      	adds	r7, #20
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr
 800084c:	e000ed00 	.word	0xe000ed00

08000850 <__NVIC_GetPriorityGrouping>:
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000854:	4b04      	ldr	r3, [pc, #16]	; (8000868 <__NVIC_GetPriorityGrouping+0x18>)
 8000856:	68db      	ldr	r3, [r3, #12]
 8000858:	0a1b      	lsrs	r3, r3, #8
 800085a:	f003 0307 	and.w	r3, r3, #7
}
 800085e:	4618      	mov	r0, r3
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr
 8000868:	e000ed00 	.word	0xe000ed00

0800086c <__NVIC_SetPriority>:
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	6039      	str	r1, [r7, #0]
 8000876:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087c:	2b00      	cmp	r3, #0
 800087e:	db0a      	blt.n	8000896 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	b2da      	uxtb	r2, r3
 8000884:	490c      	ldr	r1, [pc, #48]	; (80008b8 <__NVIC_SetPriority+0x4c>)
 8000886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800088a:	0112      	lsls	r2, r2, #4
 800088c:	b2d2      	uxtb	r2, r2
 800088e:	440b      	add	r3, r1
 8000890:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000894:	e00a      	b.n	80008ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	b2da      	uxtb	r2, r3
 800089a:	4908      	ldr	r1, [pc, #32]	; (80008bc <__NVIC_SetPriority+0x50>)
 800089c:	79fb      	ldrb	r3, [r7, #7]
 800089e:	f003 030f 	and.w	r3, r3, #15
 80008a2:	3b04      	subs	r3, #4
 80008a4:	0112      	lsls	r2, r2, #4
 80008a6:	b2d2      	uxtb	r2, r2
 80008a8:	440b      	add	r3, r1
 80008aa:	761a      	strb	r2, [r3, #24]
}
 80008ac:	bf00      	nop
 80008ae:	370c      	adds	r7, #12
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr
 80008b8:	e000e100 	.word	0xe000e100
 80008bc:	e000ed00 	.word	0xe000ed00

080008c0 <NVIC_EncodePriority>:
{
 80008c0:	b480      	push	{r7}
 80008c2:	b089      	sub	sp, #36	; 0x24
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	60f8      	str	r0, [r7, #12]
 80008c8:	60b9      	str	r1, [r7, #8]
 80008ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	f003 0307 	and.w	r3, r3, #7
 80008d2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008d4:	69fb      	ldr	r3, [r7, #28]
 80008d6:	f1c3 0307 	rsb	r3, r3, #7
 80008da:	2b04      	cmp	r3, #4
 80008dc:	bf28      	it	cs
 80008de:	2304      	movcs	r3, #4
 80008e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008e2:	69fb      	ldr	r3, [r7, #28]
 80008e4:	3304      	adds	r3, #4
 80008e6:	2b06      	cmp	r3, #6
 80008e8:	d902      	bls.n	80008f0 <NVIC_EncodePriority+0x30>
 80008ea:	69fb      	ldr	r3, [r7, #28]
 80008ec:	3b03      	subs	r3, #3
 80008ee:	e000      	b.n	80008f2 <NVIC_EncodePriority+0x32>
 80008f0:	2300      	movs	r3, #0
 80008f2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80008f8:	69bb      	ldr	r3, [r7, #24]
 80008fa:	fa02 f303 	lsl.w	r3, r2, r3
 80008fe:	43da      	mvns	r2, r3
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	401a      	ands	r2, r3
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000908:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	fa01 f303 	lsl.w	r3, r1, r3
 8000912:	43d9      	mvns	r1, r3
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000918:	4313      	orrs	r3, r2
}
 800091a:	4618      	mov	r0, r3
 800091c:	3724      	adds	r7, #36	; 0x24
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
	...

08000928 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800092c:	4b05      	ldr	r3, [pc, #20]	; (8000944 <LL_RCC_HSI_Enable+0x1c>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a04      	ldr	r2, [pc, #16]	; (8000944 <LL_RCC_HSI_Enable+0x1c>)
 8000932:	f043 0301 	orr.w	r3, r3, #1
 8000936:	6013      	str	r3, [r2, #0]
}
 8000938:	bf00      	nop
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	40021000 	.word	0x40021000

08000948 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800094c:	4b06      	ldr	r3, [pc, #24]	; (8000968 <LL_RCC_HSI_IsReady+0x20>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	f003 0302 	and.w	r3, r3, #2
 8000954:	2b02      	cmp	r3, #2
 8000956:	bf0c      	ite	eq
 8000958:	2301      	moveq	r3, #1
 800095a:	2300      	movne	r3, #0
 800095c:	b2db      	uxtb	r3, r3
}
 800095e:	4618      	mov	r0, r3
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr
 8000968:	40021000 	.word	0x40021000

0800096c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000974:	4b07      	ldr	r3, [pc, #28]	; (8000994 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	00db      	lsls	r3, r3, #3
 8000980:	4904      	ldr	r1, [pc, #16]	; (8000994 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000982:	4313      	orrs	r3, r2
 8000984:	600b      	str	r3, [r1, #0]
}
 8000986:	bf00      	nop
 8000988:	370c      	adds	r7, #12
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	40021000 	.word	0x40021000

08000998 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80009a0:	4b06      	ldr	r3, [pc, #24]	; (80009bc <LL_RCC_SetSysClkSource+0x24>)
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	f023 0203 	bic.w	r2, r3, #3
 80009a8:	4904      	ldr	r1, [pc, #16]	; (80009bc <LL_RCC_SetSysClkSource+0x24>)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4313      	orrs	r3, r2
 80009ae:	604b      	str	r3, [r1, #4]
}
 80009b0:	bf00      	nop
 80009b2:	370c      	adds	r7, #12
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr
 80009bc:	40021000 	.word	0x40021000

080009c0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80009c4:	4b04      	ldr	r3, [pc, #16]	; (80009d8 <LL_RCC_GetSysClkSource+0x18>)
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	f003 030c 	and.w	r3, r3, #12
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	40021000 	.word	0x40021000

080009dc <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80009e4:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <LL_RCC_SetAHBPrescaler+0x24>)
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80009ec:	4904      	ldr	r1, [pc, #16]	; (8000a00 <LL_RCC_SetAHBPrescaler+0x24>)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4313      	orrs	r3, r2
 80009f2:	604b      	str	r3, [r1, #4]
}
 80009f4:	bf00      	nop
 80009f6:	370c      	adds	r7, #12
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr
 8000a00:	40021000 	.word	0x40021000

08000a04 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000a0c:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000a14:	4904      	ldr	r1, [pc, #16]	; (8000a28 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	604b      	str	r3, [r1, #4]
}
 8000a1c:	bf00      	nop
 8000a1e:	370c      	adds	r7, #12
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr
 8000a28:	40021000 	.word	0x40021000

08000a2c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000a34:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000a3c:	4904      	ldr	r1, [pc, #16]	; (8000a50 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	604b      	str	r3, [r1, #4]
}
 8000a44:	bf00      	nop
 8000a46:	370c      	adds	r7, #12
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr
 8000a50:	40021000 	.word	0x40021000

08000a54 <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 8000a5c:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <LL_RCC_SetI2CClockSource+0x2c>)
 8000a5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	0e1b      	lsrs	r3, r3, #24
 8000a64:	43db      	mvns	r3, r3
 8000a66:	401a      	ands	r2, r3
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000a6e:	4904      	ldr	r1, [pc, #16]	; (8000a80 <LL_RCC_SetI2CClockSource+0x2c>)
 8000a70:	4313      	orrs	r3, r2
 8000a72:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000a74:	bf00      	nop
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr
 8000a80:	40021000 	.word	0x40021000

08000a84 <LL_APB1_GRP1_EnableClock>:
{
 8000a84:	b480      	push	{r7}
 8000a86:	b085      	sub	sp, #20
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000a8c:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000a8e:	69da      	ldr	r2, [r3, #28]
 8000a90:	4907      	ldr	r1, [pc, #28]	; (8000ab0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4313      	orrs	r3, r2
 8000a96:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000a98:	4b05      	ldr	r3, [pc, #20]	; (8000ab0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000a9a:	69da      	ldr	r2, [r3, #28]
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000aa2:	68fb      	ldr	r3, [r7, #12]
}
 8000aa4:	bf00      	nop
 8000aa6:	3714      	adds	r7, #20
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	40021000 	.word	0x40021000

08000ab4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b085      	sub	sp, #20
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000abc:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000abe:	699a      	ldr	r2, [r3, #24]
 8000ac0:	4907      	ldr	r1, [pc, #28]	; (8000ae0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000ac8:	4b05      	ldr	r3, [pc, #20]	; (8000ae0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000aca:	699a      	ldr	r2, [r3, #24]
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	4013      	ands	r3, r2
 8000ad0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ad2:	68fb      	ldr	r3, [r7, #12]
}
 8000ad4:	bf00      	nop
 8000ad6:	3714      	adds	r7, #20
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	40021000 	.word	0x40021000

08000ae4 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000aec:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <LL_FLASH_SetLatency+0x24>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f023 0207 	bic.w	r2, r3, #7
 8000af4:	4904      	ldr	r1, [pc, #16]	; (8000b08 <LL_FLASH_SetLatency+0x24>)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4313      	orrs	r3, r2
 8000afa:	600b      	str	r3, [r1, #0]
}
 8000afc:	bf00      	nop
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr
 8000b08:	40022000 	.word	0x40022000

08000b0c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000b10:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <LL_FLASH_GetLatency+0x18>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f003 0307 	and.w	r3, r3, #7
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	40022000 	.word	0x40022000

08000b28 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	695b      	ldr	r3, [r3, #20]
 8000b36:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8000b38:	68fa      	ldr	r2, [r7, #12]
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	041a      	lsls	r2, r3, #16
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	43d9      	mvns	r1, r3
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	400b      	ands	r3, r1
 8000b48:	431a      	orrs	r2, r3
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	619a      	str	r2, [r3, #24]
}
 8000b4e:	bf00      	nop
 8000b50:	3714      	adds	r7, #20
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
	...

08000b5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000b60:	2001      	movs	r0, #1
 8000b62:	f7ff ffa7 	bl	8000ab4 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000b66:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000b6a:	f7ff ff8b 	bl	8000a84 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b6e:	2003      	movs	r0, #3
 8000b70:	f7ff fe4a 	bl	8000808 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8000b74:	f7ff fe6c 	bl	8000850 <__NVIC_GetPriorityGrouping>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	210f      	movs	r1, #15
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f7ff fe9e 	bl	80008c0 <NVIC_EncodePriority>
 8000b84:	4603      	mov	r3, r0
 8000b86:	4619      	mov	r1, r3
 8000b88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b8c:	f7ff fe6e 	bl	800086c <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b90:	f000 f822 	bl	8000bd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b94:	f7ff fb84 	bl	80002a0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000b98:	f7ff fd56 	bl	8000648 <MX_I2C1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  data = i2c_master_read_byte(LSM6DS0_DEVICE_ADDRESS, LSM6DS0_WHO_AM_I_ADDRES);
 8000b9c:	210f      	movs	r1, #15
 8000b9e:	20d6      	movs	r0, #214	; 0xd6
 8000ba0:	f7ff fdc0 	bl	8000724 <i2c_master_read_byte>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <main+0x74>)
 8000baa:	701a      	strb	r2, [r3, #0]
	  if(data == LSM6DS0_WHO_AM_I_VALUE)
 8000bac:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <main+0x74>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	2b68      	cmp	r3, #104	; 0x68
 8000bb2:	d103      	bne.n	8000bbc <main+0x60>
		  {
			  LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_3);
 8000bb4:	2108      	movs	r1, #8
 8000bb6:	4807      	ldr	r0, [pc, #28]	; (8000bd4 <main+0x78>)
 8000bb8:	f7ff ffb6 	bl	8000b28 <LL_GPIO_TogglePin>
		  }
	  printf(data);
 8000bbc:	4b04      	ldr	r3, [pc, #16]	; (8000bd0 <main+0x74>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f000 fcbd 	bl	8001540 <iprintf>

		  LL_mDelay(100);
 8000bc6:	2064      	movs	r0, #100	; 0x64
 8000bc8:	f000 fbc2 	bl	8001350 <LL_mDelay>
  {
 8000bcc:	e7e6      	b.n	8000b9c <main+0x40>
 8000bce:	bf00      	nop
 8000bd0:	2000007d 	.word	0x2000007d
 8000bd4:	48000400 	.word	0x48000400

08000bd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8000bdc:	2000      	movs	r0, #0
 8000bde:	f7ff ff81 	bl	8000ae4 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8000be2:	bf00      	nop
 8000be4:	f7ff ff92 	bl	8000b0c <LL_FLASH_GetLatency>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d1fa      	bne.n	8000be4 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 8000bee:	f7ff fe9b 	bl	8000928 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000bf2:	bf00      	nop
 8000bf4:	f7ff fea8 	bl	8000948 <LL_RCC_HSI_IsReady>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d1fa      	bne.n	8000bf4 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8000bfe:	2010      	movs	r0, #16
 8000c00:	f7ff feb4 	bl	800096c <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000c04:	2000      	movs	r0, #0
 8000c06:	f7ff fee9 	bl	80009dc <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000c0a:	2000      	movs	r0, #0
 8000c0c:	f7ff fefa 	bl	8000a04 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000c10:	2000      	movs	r0, #0
 8000c12:	f7ff ff0b 	bl	8000a2c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8000c16:	2000      	movs	r0, #0
 8000c18:	f7ff febe 	bl	8000998 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8000c1c:	bf00      	nop
 8000c1e:	f7ff fecf 	bl	80009c0 <LL_RCC_GetSysClkSource>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d1fa      	bne.n	8000c1e <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 8000c28:	4805      	ldr	r0, [pc, #20]	; (8000c40 <SystemClock_Config+0x68>)
 8000c2a:	f000 fb83 	bl	8001334 <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 8000c2e:	4804      	ldr	r0, [pc, #16]	; (8000c40 <SystemClock_Config+0x68>)
 8000c30:	f000 fbb4 	bl	800139c <LL_SetSystemCoreClock>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 8000c34:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000c38:	f7ff ff0c 	bl	8000a54 <LL_RCC_SetI2CClockSource>
}
 8000c3c:	bf00      	nop
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	007a1200 	.word	0x007a1200

08000c44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c48:	e7fe      	b.n	8000c48 <NMI_Handler+0x4>

08000c4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c4e:	e7fe      	b.n	8000c4e <HardFault_Handler+0x4>

08000c50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c54:	e7fe      	b.n	8000c54 <MemManage_Handler+0x4>

08000c56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c5a:	e7fe      	b.n	8000c5a <BusFault_Handler+0x4>

08000c5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c60:	e7fe      	b.n	8000c60 <UsageFault_Handler+0x4>

08000c62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c62:	b480      	push	{r7}
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr

08000c7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr

08000c8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr

08000c9a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b086      	sub	sp, #24
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	60f8      	str	r0, [r7, #12]
 8000ca2:	60b9      	str	r1, [r7, #8]
 8000ca4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	617b      	str	r3, [r7, #20]
 8000caa:	e00a      	b.n	8000cc2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cac:	f3af 8000 	nop.w
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	1c5a      	adds	r2, r3, #1
 8000cb6:	60ba      	str	r2, [r7, #8]
 8000cb8:	b2ca      	uxtb	r2, r1
 8000cba:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	617b      	str	r3, [r7, #20]
 8000cc2:	697a      	ldr	r2, [r7, #20]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	429a      	cmp	r2, r3
 8000cc8:	dbf0      	blt.n	8000cac <_read+0x12>
  }

  return len;
 8000cca:	687b      	ldr	r3, [r7, #4]
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3718      	adds	r7, #24
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	60f8      	str	r0, [r7, #12]
 8000cdc:	60b9      	str	r1, [r7, #8]
 8000cde:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	617b      	str	r3, [r7, #20]
 8000ce4:	e009      	b.n	8000cfa <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ce6:	68bb      	ldr	r3, [r7, #8]
 8000ce8:	1c5a      	adds	r2, r3, #1
 8000cea:	60ba      	str	r2, [r7, #8]
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	617b      	str	r3, [r7, #20]
 8000cfa:	697a      	ldr	r2, [r7, #20]
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	dbf1      	blt.n	8000ce6 <_write+0x12>
  }
  return len;
 8000d02:	687b      	ldr	r3, [r7, #4]
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3718      	adds	r7, #24
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <_close>:

int _close(int file)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d34:	605a      	str	r2, [r3, #4]
  return 0;
 8000d36:	2300      	movs	r3, #0
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <_isatty>:

int _isatty(int file)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d4c:	2301      	movs	r3, #1
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr

08000d5a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	b085      	sub	sp, #20
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	60f8      	str	r0, [r7, #12]
 8000d62:	60b9      	str	r1, [r7, #8]
 8000d64:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d66:	2300      	movs	r3, #0
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3714      	adds	r7, #20
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr

08000d74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d7c:	4a14      	ldr	r2, [pc, #80]	; (8000dd0 <_sbrk+0x5c>)
 8000d7e:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <_sbrk+0x60>)
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d88:	4b13      	ldr	r3, [pc, #76]	; (8000dd8 <_sbrk+0x64>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d102      	bne.n	8000d96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d90:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <_sbrk+0x64>)
 8000d92:	4a12      	ldr	r2, [pc, #72]	; (8000ddc <_sbrk+0x68>)
 8000d94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d96:	4b10      	ldr	r3, [pc, #64]	; (8000dd8 <_sbrk+0x64>)
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d207      	bcs.n	8000db4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000da4:	f000 fbe6 	bl	8001574 <__errno>
 8000da8:	4603      	mov	r3, r0
 8000daa:	220c      	movs	r2, #12
 8000dac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000db2:	e009      	b.n	8000dc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000db4:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <_sbrk+0x64>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dba:	4b07      	ldr	r3, [pc, #28]	; (8000dd8 <_sbrk+0x64>)
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	4a05      	ldr	r2, [pc, #20]	; (8000dd8 <_sbrk+0x64>)
 8000dc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dc6:	68fb      	ldr	r3, [r7, #12]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3718      	adds	r7, #24
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20003000 	.word	0x20003000
 8000dd4:	00000400 	.word	0x00000400
 8000dd8:	20000080 	.word	0x20000080
 8000ddc:	200001d0 	.word	0x200001d0

08000de0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000de4:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <SystemInit+0x20>)
 8000de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dea:	4a05      	ldr	r2, [pc, #20]	; (8000e00 <SystemInit+0x20>)
 8000dec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000df0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e3c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e08:	f7ff ffea 	bl	8000de0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e0c:	480c      	ldr	r0, [pc, #48]	; (8000e40 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e0e:	490d      	ldr	r1, [pc, #52]	; (8000e44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e10:	4a0d      	ldr	r2, [pc, #52]	; (8000e48 <LoopForever+0xe>)
  movs r3, #0
 8000e12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e14:	e002      	b.n	8000e1c <LoopCopyDataInit>

08000e16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e1a:	3304      	adds	r3, #4

08000e1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e20:	d3f9      	bcc.n	8000e16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e22:	4a0a      	ldr	r2, [pc, #40]	; (8000e4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e24:	4c0a      	ldr	r4, [pc, #40]	; (8000e50 <LoopForever+0x16>)
  movs r3, #0
 8000e26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e28:	e001      	b.n	8000e2e <LoopFillZerobss>

08000e2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e2c:	3204      	adds	r2, #4

08000e2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e30:	d3fb      	bcc.n	8000e2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e32:	f000 fba5 	bl	8001580 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e36:	f7ff fe91 	bl	8000b5c <main>

08000e3a <LoopForever>:

LoopForever:
    b LoopForever
 8000e3a:	e7fe      	b.n	8000e3a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e3c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000e40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e44:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000e48:	08002278 	.word	0x08002278
  ldr r2, =_sbss
 8000e4c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000e50:	200001d0 	.word	0x200001d0

08000e54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e54:	e7fe      	b.n	8000e54 <ADC1_2_IRQHandler>

08000e56 <LL_GPIO_SetPinMode>:
{
 8000e56:	b480      	push	{r7}
 8000e58:	b089      	sub	sp, #36	; 0x24
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	60f8      	str	r0, [r7, #12]
 8000e5e:	60b9      	str	r1, [r7, #8]
 8000e60:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	68bb      	ldr	r3, [r7, #8]
 8000e68:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	fa93 f3a3 	rbit	r3, r3
 8000e70:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	fab3 f383 	clz	r3, r3
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	2103      	movs	r1, #3
 8000e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e82:	43db      	mvns	r3, r3
 8000e84:	401a      	ands	r2, r3
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	fa93 f3a3 	rbit	r3, r3
 8000e90:	61bb      	str	r3, [r7, #24]
  return result;
 8000e92:	69bb      	ldr	r3, [r7, #24]
 8000e94:	fab3 f383 	clz	r3, r3
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	6879      	ldr	r1, [r7, #4]
 8000e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea2:	431a      	orrs	r2, r3
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	601a      	str	r2, [r3, #0]
}
 8000ea8:	bf00      	nop
 8000eaa:	3724      	adds	r7, #36	; 0x24
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr

08000eb4 <LL_GPIO_SetPinOutputType>:
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	60f8      	str	r0, [r7, #12]
 8000ebc:	60b9      	str	r1, [r7, #8]
 8000ebe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	685a      	ldr	r2, [r3, #4]
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	43db      	mvns	r3, r3
 8000ec8:	401a      	ands	r2, r3
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	6879      	ldr	r1, [r7, #4]
 8000ece:	fb01 f303 	mul.w	r3, r1, r3
 8000ed2:	431a      	orrs	r2, r3
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	605a      	str	r2, [r3, #4]
}
 8000ed8:	bf00      	nop
 8000eda:	3714      	adds	r7, #20
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <LL_GPIO_SetPinSpeed>:
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b089      	sub	sp, #36	; 0x24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	689a      	ldr	r2, [r3, #8]
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	fa93 f3a3 	rbit	r3, r3
 8000efe:	613b      	str	r3, [r7, #16]
  return result;
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	fab3 f383 	clz	r3, r3
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	2103      	movs	r1, #3
 8000f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f10:	43db      	mvns	r3, r3
 8000f12:	401a      	ands	r2, r3
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	fa93 f3a3 	rbit	r3, r3
 8000f1e:	61bb      	str	r3, [r7, #24]
  return result;
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	fab3 f383 	clz	r3, r3
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	6879      	ldr	r1, [r7, #4]
 8000f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f30:	431a      	orrs	r2, r3
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	609a      	str	r2, [r3, #8]
}
 8000f36:	bf00      	nop
 8000f38:	3724      	adds	r7, #36	; 0x24
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr

08000f42 <LL_GPIO_SetPinPull>:
{
 8000f42:	b480      	push	{r7}
 8000f44:	b089      	sub	sp, #36	; 0x24
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	60f8      	str	r0, [r7, #12]
 8000f4a:	60b9      	str	r1, [r7, #8]
 8000f4c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	68da      	ldr	r2, [r3, #12]
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	fa93 f3a3 	rbit	r3, r3
 8000f5c:	613b      	str	r3, [r7, #16]
  return result;
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	fab3 f383 	clz	r3, r3
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	2103      	movs	r1, #3
 8000f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6e:	43db      	mvns	r3, r3
 8000f70:	401a      	ands	r2, r3
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	fa93 f3a3 	rbit	r3, r3
 8000f7c:	61bb      	str	r3, [r7, #24]
  return result;
 8000f7e:	69bb      	ldr	r3, [r7, #24]
 8000f80:	fab3 f383 	clz	r3, r3
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	6879      	ldr	r1, [r7, #4]
 8000f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8e:	431a      	orrs	r2, r3
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	60da      	str	r2, [r3, #12]
}
 8000f94:	bf00      	nop
 8000f96:	3724      	adds	r7, #36	; 0x24
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <LL_GPIO_SetAFPin_0_7>:
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b089      	sub	sp, #36	; 0x24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	6a1a      	ldr	r2, [r3, #32]
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	fa93 f3a3 	rbit	r3, r3
 8000fba:	613b      	str	r3, [r7, #16]
  return result;
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	fab3 f383 	clz	r3, r3
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	210f      	movs	r1, #15
 8000fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	401a      	ands	r2, r3
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	fa93 f3a3 	rbit	r3, r3
 8000fda:	61bb      	str	r3, [r7, #24]
  return result;
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	fab3 f383 	clz	r3, r3
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	6879      	ldr	r1, [r7, #4]
 8000fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fec:	431a      	orrs	r2, r3
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	621a      	str	r2, [r3, #32]
}
 8000ff2:	bf00      	nop
 8000ff4:	3724      	adds	r7, #36	; 0x24
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr

08000ffe <LL_GPIO_SetAFPin_8_15>:
{
 8000ffe:	b480      	push	{r7}
 8001000:	b089      	sub	sp, #36	; 0x24
 8001002:	af00      	add	r7, sp, #0
 8001004:	60f8      	str	r0, [r7, #12]
 8001006:	60b9      	str	r1, [r7, #8]
 8001008:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	0a1b      	lsrs	r3, r3, #8
 8001012:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	fa93 f3a3 	rbit	r3, r3
 800101a:	613b      	str	r3, [r7, #16]
  return result;
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	fab3 f383 	clz	r3, r3
 8001022:	b2db      	uxtb	r3, r3
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	210f      	movs	r1, #15
 8001028:	fa01 f303 	lsl.w	r3, r1, r3
 800102c:	43db      	mvns	r3, r3
 800102e:	401a      	ands	r2, r3
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	0a1b      	lsrs	r3, r3, #8
 8001034:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	fa93 f3a3 	rbit	r3, r3
 800103c:	61bb      	str	r3, [r7, #24]
  return result;
 800103e:	69bb      	ldr	r3, [r7, #24]
 8001040:	fab3 f383 	clz	r3, r3
 8001044:	b2db      	uxtb	r3, r3
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	6879      	ldr	r1, [r7, #4]
 800104a:	fa01 f303 	lsl.w	r3, r1, r3
 800104e:	431a      	orrs	r2, r3
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001054:	bf00      	nop
 8001056:	3724      	adds	r7, #36	; 0x24
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b088      	sub	sp, #32
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	fa93 f3a3 	rbit	r3, r3
 8001076:	613b      	str	r3, [r7, #16]
  return result;
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	fab3 f383 	clz	r3, r3
 800107e:	b2db      	uxtb	r3, r3
 8001080:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001082:	e051      	b.n	8001128 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	2101      	movs	r1, #1
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	fa01 f303 	lsl.w	r3, r1, r3
 8001090:	4013      	ands	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d043      	beq.n	8001122 <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d003      	beq.n	80010aa <LL_GPIO_Init+0x4a>
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d10e      	bne.n	80010c8 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	461a      	mov	r2, r3
 80010b0:	69b9      	ldr	r1, [r7, #24]
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f7ff ff16 	bl	8000ee4 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	6819      	ldr	r1, [r3, #0]
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	461a      	mov	r2, r3
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f7ff fef6 	bl	8000eb4 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	691b      	ldr	r3, [r3, #16]
 80010cc:	461a      	mov	r2, r3
 80010ce:	69b9      	ldr	r1, [r7, #24]
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f7ff ff36 	bl	8000f42 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	2b02      	cmp	r3, #2
 80010dc:	d11a      	bne.n	8001114 <LL_GPIO_Init+0xb4>
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	fa93 f3a3 	rbit	r3, r3
 80010e8:	60bb      	str	r3, [r7, #8]
  return result;
 80010ea:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80010ec:	fab3 f383 	clz	r3, r3
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	2b07      	cmp	r3, #7
 80010f4:	d807      	bhi.n	8001106 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	695b      	ldr	r3, [r3, #20]
 80010fa:	461a      	mov	r2, r3
 80010fc:	69b9      	ldr	r1, [r7, #24]
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f7ff ff4e 	bl	8000fa0 <LL_GPIO_SetAFPin_0_7>
 8001104:	e006      	b.n	8001114 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	695b      	ldr	r3, [r3, #20]
 800110a:	461a      	mov	r2, r3
 800110c:	69b9      	ldr	r1, [r7, #24]
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f7ff ff75 	bl	8000ffe <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	461a      	mov	r2, r3
 800111a:	69b9      	ldr	r1, [r7, #24]
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f7ff fe9a 	bl	8000e56 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	3301      	adds	r3, #1
 8001126:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	fa22 f303 	lsr.w	r3, r2, r3
 8001132:	2b00      	cmp	r3, #0
 8001134:	d1a6      	bne.n	8001084 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8001136:	2300      	movs	r3, #0
}
 8001138:	4618      	mov	r0, r3
 800113a:	3720      	adds	r7, #32
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}

08001140 <LL_I2C_Enable>:
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f043 0201 	orr.w	r2, r3, #1
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	601a      	str	r2, [r3, #0]
}
 8001154:	bf00      	nop
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <LL_I2C_Disable>:
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f023 0201 	bic.w	r2, r3, #1
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	601a      	str	r2, [r3, #0]
}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <LL_I2C_ConfigFilters>:
{
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	60f8      	str	r0, [r7, #12]
 8001188:	60b9      	str	r1, [r7, #8]
 800118a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	0219      	lsls	r1, r3, #8
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	430b      	orrs	r3, r1
 800119c:	431a      	orrs	r2, r3
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	601a      	str	r2, [r3, #0]
}
 80011a2:	bf00      	nop
 80011a4:	3714      	adds	r7, #20
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr

080011ae <LL_I2C_SetOwnAddress1>:
{
 80011ae:	b480      	push	{r7}
 80011b0:	b085      	sub	sp, #20
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	60f8      	str	r0, [r7, #12]
 80011b6:	60b9      	str	r1, [r7, #8]
 80011b8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80011c2:	f023 0307 	bic.w	r3, r3, #7
 80011c6:	68b9      	ldr	r1, [r7, #8]
 80011c8:	687a      	ldr	r2, [r7, #4]
 80011ca:	430a      	orrs	r2, r1
 80011cc:	431a      	orrs	r2, r3
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	609a      	str	r2, [r3, #8]
}
 80011d2:	bf00      	nop
 80011d4:	3714      	adds	r7, #20
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr

080011de <LL_I2C_EnableOwnAddress1>:
{
 80011de:	b480      	push	{r7}
 80011e0:	b083      	sub	sp, #12
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	609a      	str	r2, [r3, #8]
}
 80011f2:	bf00      	nop
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr

080011fe <LL_I2C_DisableOwnAddress1>:
{
 80011fe:	b480      	push	{r7}
 8001200:	b083      	sub	sp, #12
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	609a      	str	r2, [r3, #8]
}
 8001212:	bf00      	nop
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr

0800121e <LL_I2C_SetTiming>:
{
 800121e:	b480      	push	{r7}
 8001220:	b083      	sub	sp, #12
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
 8001226:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	683a      	ldr	r2, [r7, #0]
 800122c:	611a      	str	r2, [r3, #16]
}
 800122e:	bf00      	nop
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr

0800123a <LL_I2C_SetMode>:
{
 800123a:	b480      	push	{r7}
 800123c:	b083      	sub	sp, #12
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
 8001242:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	431a      	orrs	r2, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	601a      	str	r2, [r3, #0]
}
 8001254:	bf00      	nop
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <LL_I2C_AcknowledgeNextData>:
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	431a      	orrs	r2, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	605a      	str	r2, [r3, #4]
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr

08001286 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, const LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	b082      	sub	sp, #8
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
 800128e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f7ff ff65 	bl	8001160 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	6899      	ldr	r1, [r3, #8]
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	68db      	ldr	r3, [r3, #12]
 800129e:	461a      	mov	r2, r3
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f7ff ff6d 	bl	8001180 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	4619      	mov	r1, r3
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f7ff ffb6 	bl	800121e <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f7ff ff44 	bl	8001140 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f7ff ffa0 	bl	80011fe <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	6919      	ldr	r1, [r3, #16]
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	699b      	ldr	r3, [r3, #24]
 80012c6:	461a      	mov	r2, r3
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f7ff ff70 	bl	80011ae <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	691b      	ldr	r3, [r3, #16]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d002      	beq.n	80012dc <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f7ff ff81 	bl	80011de <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4619      	mov	r1, r3
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f7ff ffa9 	bl	800123a <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	695b      	ldr	r3, [r3, #20]
 80012ec:	4619      	mov	r1, r3
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f7ff ffb6 	bl	8001260 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
	...

08001300 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001312:	4a07      	ldr	r2, [pc, #28]	; (8001330 <LL_InitTick+0x30>)
 8001314:	3b01      	subs	r3, #1
 8001316:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001318:	4b05      	ldr	r3, [pc, #20]	; (8001330 <LL_InitTick+0x30>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800131e:	4b04      	ldr	r3, [pc, #16]	; (8001330 <LL_InitTick+0x30>)
 8001320:	2205      	movs	r2, #5
 8001322:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001324:	bf00      	nop
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	e000e010 	.word	0xe000e010

08001334 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 800133c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f7ff ffdd 	bl	8001300 <LL_InitTick>
}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
	...

08001350 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8001350:	b480      	push	{r7}
 8001352:	b085      	sub	sp, #20
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8001358:	4b0f      	ldr	r3, [pc, #60]	; (8001398 <LL_mDelay+0x48>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800135e:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001366:	d00c      	beq.n	8001382 <LL_mDelay+0x32>
  {
    Delay++;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	3301      	adds	r3, #1
 800136c:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 800136e:	e008      	b.n	8001382 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8001370:	4b09      	ldr	r3, [pc, #36]	; (8001398 <LL_mDelay+0x48>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001378:	2b00      	cmp	r3, #0
 800137a:	d002      	beq.n	8001382 <LL_mDelay+0x32>
    {
      Delay--;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	3b01      	subs	r3, #1
 8001380:	607b      	str	r3, [r7, #4]
  while (Delay)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d1f3      	bne.n	8001370 <LL_mDelay+0x20>
    }
  }
}
 8001388:	bf00      	nop
 800138a:	bf00      	nop
 800138c:	3714      	adds	r7, #20
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	e000e010 	.word	0xe000e010

0800139c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80013a4:	4a04      	ldr	r2, [pc, #16]	; (80013b8 <LL_SetSystemCoreClock+0x1c>)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6013      	str	r3, [r2, #0]
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	20000000 	.word	0x20000000

080013bc <std>:
 80013bc:	2300      	movs	r3, #0
 80013be:	b510      	push	{r4, lr}
 80013c0:	4604      	mov	r4, r0
 80013c2:	e9c0 3300 	strd	r3, r3, [r0]
 80013c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80013ca:	6083      	str	r3, [r0, #8]
 80013cc:	8181      	strh	r1, [r0, #12]
 80013ce:	6643      	str	r3, [r0, #100]	; 0x64
 80013d0:	81c2      	strh	r2, [r0, #14]
 80013d2:	6183      	str	r3, [r0, #24]
 80013d4:	4619      	mov	r1, r3
 80013d6:	2208      	movs	r2, #8
 80013d8:	305c      	adds	r0, #92	; 0x5c
 80013da:	f000 f8c3 	bl	8001564 <memset>
 80013de:	4b0d      	ldr	r3, [pc, #52]	; (8001414 <std+0x58>)
 80013e0:	6263      	str	r3, [r4, #36]	; 0x24
 80013e2:	4b0d      	ldr	r3, [pc, #52]	; (8001418 <std+0x5c>)
 80013e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80013e6:	4b0d      	ldr	r3, [pc, #52]	; (800141c <std+0x60>)
 80013e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80013ea:	4b0d      	ldr	r3, [pc, #52]	; (8001420 <std+0x64>)
 80013ec:	6323      	str	r3, [r4, #48]	; 0x30
 80013ee:	4b0d      	ldr	r3, [pc, #52]	; (8001424 <std+0x68>)
 80013f0:	6224      	str	r4, [r4, #32]
 80013f2:	429c      	cmp	r4, r3
 80013f4:	d006      	beq.n	8001404 <std+0x48>
 80013f6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80013fa:	4294      	cmp	r4, r2
 80013fc:	d002      	beq.n	8001404 <std+0x48>
 80013fe:	33d0      	adds	r3, #208	; 0xd0
 8001400:	429c      	cmp	r4, r3
 8001402:	d105      	bne.n	8001410 <std+0x54>
 8001404:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001408:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800140c:	f000 b8dc 	b.w	80015c8 <__retarget_lock_init_recursive>
 8001410:	bd10      	pop	{r4, pc}
 8001412:	bf00      	nop
 8001414:	08001e29 	.word	0x08001e29
 8001418:	08001e4b 	.word	0x08001e4b
 800141c:	08001e83 	.word	0x08001e83
 8001420:	08001ea7 	.word	0x08001ea7
 8001424:	20000084 	.word	0x20000084

08001428 <stdio_exit_handler>:
 8001428:	4a02      	ldr	r2, [pc, #8]	; (8001434 <stdio_exit_handler+0xc>)
 800142a:	4903      	ldr	r1, [pc, #12]	; (8001438 <stdio_exit_handler+0x10>)
 800142c:	4803      	ldr	r0, [pc, #12]	; (800143c <stdio_exit_handler+0x14>)
 800142e:	f000 b869 	b.w	8001504 <_fwalk_sglue>
 8001432:	bf00      	nop
 8001434:	20000004 	.word	0x20000004
 8001438:	08001dc1 	.word	0x08001dc1
 800143c:	20000010 	.word	0x20000010

08001440 <cleanup_stdio>:
 8001440:	6841      	ldr	r1, [r0, #4]
 8001442:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <cleanup_stdio+0x34>)
 8001444:	4299      	cmp	r1, r3
 8001446:	b510      	push	{r4, lr}
 8001448:	4604      	mov	r4, r0
 800144a:	d001      	beq.n	8001450 <cleanup_stdio+0x10>
 800144c:	f000 fcb8 	bl	8001dc0 <_fflush_r>
 8001450:	68a1      	ldr	r1, [r4, #8]
 8001452:	4b09      	ldr	r3, [pc, #36]	; (8001478 <cleanup_stdio+0x38>)
 8001454:	4299      	cmp	r1, r3
 8001456:	d002      	beq.n	800145e <cleanup_stdio+0x1e>
 8001458:	4620      	mov	r0, r4
 800145a:	f000 fcb1 	bl	8001dc0 <_fflush_r>
 800145e:	68e1      	ldr	r1, [r4, #12]
 8001460:	4b06      	ldr	r3, [pc, #24]	; (800147c <cleanup_stdio+0x3c>)
 8001462:	4299      	cmp	r1, r3
 8001464:	d004      	beq.n	8001470 <cleanup_stdio+0x30>
 8001466:	4620      	mov	r0, r4
 8001468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800146c:	f000 bca8 	b.w	8001dc0 <_fflush_r>
 8001470:	bd10      	pop	{r4, pc}
 8001472:	bf00      	nop
 8001474:	20000084 	.word	0x20000084
 8001478:	200000ec 	.word	0x200000ec
 800147c:	20000154 	.word	0x20000154

08001480 <global_stdio_init.part.0>:
 8001480:	b510      	push	{r4, lr}
 8001482:	4b0b      	ldr	r3, [pc, #44]	; (80014b0 <global_stdio_init.part.0+0x30>)
 8001484:	4c0b      	ldr	r4, [pc, #44]	; (80014b4 <global_stdio_init.part.0+0x34>)
 8001486:	4a0c      	ldr	r2, [pc, #48]	; (80014b8 <global_stdio_init.part.0+0x38>)
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	4620      	mov	r0, r4
 800148c:	2200      	movs	r2, #0
 800148e:	2104      	movs	r1, #4
 8001490:	f7ff ff94 	bl	80013bc <std>
 8001494:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8001498:	2201      	movs	r2, #1
 800149a:	2109      	movs	r1, #9
 800149c:	f7ff ff8e 	bl	80013bc <std>
 80014a0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80014a4:	2202      	movs	r2, #2
 80014a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80014aa:	2112      	movs	r1, #18
 80014ac:	f7ff bf86 	b.w	80013bc <std>
 80014b0:	200001bc 	.word	0x200001bc
 80014b4:	20000084 	.word	0x20000084
 80014b8:	08001429 	.word	0x08001429

080014bc <__sfp_lock_acquire>:
 80014bc:	4801      	ldr	r0, [pc, #4]	; (80014c4 <__sfp_lock_acquire+0x8>)
 80014be:	f000 b884 	b.w	80015ca <__retarget_lock_acquire_recursive>
 80014c2:	bf00      	nop
 80014c4:	200001c1 	.word	0x200001c1

080014c8 <__sfp_lock_release>:
 80014c8:	4801      	ldr	r0, [pc, #4]	; (80014d0 <__sfp_lock_release+0x8>)
 80014ca:	f000 b87f 	b.w	80015cc <__retarget_lock_release_recursive>
 80014ce:	bf00      	nop
 80014d0:	200001c1 	.word	0x200001c1

080014d4 <__sinit>:
 80014d4:	b510      	push	{r4, lr}
 80014d6:	4604      	mov	r4, r0
 80014d8:	f7ff fff0 	bl	80014bc <__sfp_lock_acquire>
 80014dc:	6a23      	ldr	r3, [r4, #32]
 80014de:	b11b      	cbz	r3, 80014e8 <__sinit+0x14>
 80014e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80014e4:	f7ff bff0 	b.w	80014c8 <__sfp_lock_release>
 80014e8:	4b04      	ldr	r3, [pc, #16]	; (80014fc <__sinit+0x28>)
 80014ea:	6223      	str	r3, [r4, #32]
 80014ec:	4b04      	ldr	r3, [pc, #16]	; (8001500 <__sinit+0x2c>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d1f5      	bne.n	80014e0 <__sinit+0xc>
 80014f4:	f7ff ffc4 	bl	8001480 <global_stdio_init.part.0>
 80014f8:	e7f2      	b.n	80014e0 <__sinit+0xc>
 80014fa:	bf00      	nop
 80014fc:	08001441 	.word	0x08001441
 8001500:	200001bc 	.word	0x200001bc

08001504 <_fwalk_sglue>:
 8001504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001508:	4607      	mov	r7, r0
 800150a:	4688      	mov	r8, r1
 800150c:	4614      	mov	r4, r2
 800150e:	2600      	movs	r6, #0
 8001510:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001514:	f1b9 0901 	subs.w	r9, r9, #1
 8001518:	d505      	bpl.n	8001526 <_fwalk_sglue+0x22>
 800151a:	6824      	ldr	r4, [r4, #0]
 800151c:	2c00      	cmp	r4, #0
 800151e:	d1f7      	bne.n	8001510 <_fwalk_sglue+0xc>
 8001520:	4630      	mov	r0, r6
 8001522:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001526:	89ab      	ldrh	r3, [r5, #12]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d907      	bls.n	800153c <_fwalk_sglue+0x38>
 800152c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001530:	3301      	adds	r3, #1
 8001532:	d003      	beq.n	800153c <_fwalk_sglue+0x38>
 8001534:	4629      	mov	r1, r5
 8001536:	4638      	mov	r0, r7
 8001538:	47c0      	blx	r8
 800153a:	4306      	orrs	r6, r0
 800153c:	3568      	adds	r5, #104	; 0x68
 800153e:	e7e9      	b.n	8001514 <_fwalk_sglue+0x10>

08001540 <iprintf>:
 8001540:	b40f      	push	{r0, r1, r2, r3}
 8001542:	b507      	push	{r0, r1, r2, lr}
 8001544:	4906      	ldr	r1, [pc, #24]	; (8001560 <iprintf+0x20>)
 8001546:	ab04      	add	r3, sp, #16
 8001548:	6808      	ldr	r0, [r1, #0]
 800154a:	f853 2b04 	ldr.w	r2, [r3], #4
 800154e:	6881      	ldr	r1, [r0, #8]
 8001550:	9301      	str	r3, [sp, #4]
 8001552:	f000 f865 	bl	8001620 <_vfiprintf_r>
 8001556:	b003      	add	sp, #12
 8001558:	f85d eb04 	ldr.w	lr, [sp], #4
 800155c:	b004      	add	sp, #16
 800155e:	4770      	bx	lr
 8001560:	2000005c 	.word	0x2000005c

08001564 <memset>:
 8001564:	4402      	add	r2, r0
 8001566:	4603      	mov	r3, r0
 8001568:	4293      	cmp	r3, r2
 800156a:	d100      	bne.n	800156e <memset+0xa>
 800156c:	4770      	bx	lr
 800156e:	f803 1b01 	strb.w	r1, [r3], #1
 8001572:	e7f9      	b.n	8001568 <memset+0x4>

08001574 <__errno>:
 8001574:	4b01      	ldr	r3, [pc, #4]	; (800157c <__errno+0x8>)
 8001576:	6818      	ldr	r0, [r3, #0]
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	2000005c 	.word	0x2000005c

08001580 <__libc_init_array>:
 8001580:	b570      	push	{r4, r5, r6, lr}
 8001582:	4d0d      	ldr	r5, [pc, #52]	; (80015b8 <__libc_init_array+0x38>)
 8001584:	4c0d      	ldr	r4, [pc, #52]	; (80015bc <__libc_init_array+0x3c>)
 8001586:	1b64      	subs	r4, r4, r5
 8001588:	10a4      	asrs	r4, r4, #2
 800158a:	2600      	movs	r6, #0
 800158c:	42a6      	cmp	r6, r4
 800158e:	d109      	bne.n	80015a4 <__libc_init_array+0x24>
 8001590:	4d0b      	ldr	r5, [pc, #44]	; (80015c0 <__libc_init_array+0x40>)
 8001592:	4c0c      	ldr	r4, [pc, #48]	; (80015c4 <__libc_init_array+0x44>)
 8001594:	f000 fe46 	bl	8002224 <_init>
 8001598:	1b64      	subs	r4, r4, r5
 800159a:	10a4      	asrs	r4, r4, #2
 800159c:	2600      	movs	r6, #0
 800159e:	42a6      	cmp	r6, r4
 80015a0:	d105      	bne.n	80015ae <__libc_init_array+0x2e>
 80015a2:	bd70      	pop	{r4, r5, r6, pc}
 80015a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80015a8:	4798      	blx	r3
 80015aa:	3601      	adds	r6, #1
 80015ac:	e7ee      	b.n	800158c <__libc_init_array+0xc>
 80015ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80015b2:	4798      	blx	r3
 80015b4:	3601      	adds	r6, #1
 80015b6:	e7f2      	b.n	800159e <__libc_init_array+0x1e>
 80015b8:	08002270 	.word	0x08002270
 80015bc:	08002270 	.word	0x08002270
 80015c0:	08002270 	.word	0x08002270
 80015c4:	08002274 	.word	0x08002274

080015c8 <__retarget_lock_init_recursive>:
 80015c8:	4770      	bx	lr

080015ca <__retarget_lock_acquire_recursive>:
 80015ca:	4770      	bx	lr

080015cc <__retarget_lock_release_recursive>:
 80015cc:	4770      	bx	lr

080015ce <__sfputc_r>:
 80015ce:	6893      	ldr	r3, [r2, #8]
 80015d0:	3b01      	subs	r3, #1
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	b410      	push	{r4}
 80015d6:	6093      	str	r3, [r2, #8]
 80015d8:	da08      	bge.n	80015ec <__sfputc_r+0x1e>
 80015da:	6994      	ldr	r4, [r2, #24]
 80015dc:	42a3      	cmp	r3, r4
 80015de:	db01      	blt.n	80015e4 <__sfputc_r+0x16>
 80015e0:	290a      	cmp	r1, #10
 80015e2:	d103      	bne.n	80015ec <__sfputc_r+0x1e>
 80015e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80015e8:	f000 bc61 	b.w	8001eae <__swbuf_r>
 80015ec:	6813      	ldr	r3, [r2, #0]
 80015ee:	1c58      	adds	r0, r3, #1
 80015f0:	6010      	str	r0, [r2, #0]
 80015f2:	7019      	strb	r1, [r3, #0]
 80015f4:	4608      	mov	r0, r1
 80015f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <__sfputs_r>:
 80015fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015fe:	4606      	mov	r6, r0
 8001600:	460f      	mov	r7, r1
 8001602:	4614      	mov	r4, r2
 8001604:	18d5      	adds	r5, r2, r3
 8001606:	42ac      	cmp	r4, r5
 8001608:	d101      	bne.n	800160e <__sfputs_r+0x12>
 800160a:	2000      	movs	r0, #0
 800160c:	e007      	b.n	800161e <__sfputs_r+0x22>
 800160e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001612:	463a      	mov	r2, r7
 8001614:	4630      	mov	r0, r6
 8001616:	f7ff ffda 	bl	80015ce <__sfputc_r>
 800161a:	1c43      	adds	r3, r0, #1
 800161c:	d1f3      	bne.n	8001606 <__sfputs_r+0xa>
 800161e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001620 <_vfiprintf_r>:
 8001620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001624:	460d      	mov	r5, r1
 8001626:	b09d      	sub	sp, #116	; 0x74
 8001628:	4614      	mov	r4, r2
 800162a:	4698      	mov	r8, r3
 800162c:	4606      	mov	r6, r0
 800162e:	b118      	cbz	r0, 8001638 <_vfiprintf_r+0x18>
 8001630:	6a03      	ldr	r3, [r0, #32]
 8001632:	b90b      	cbnz	r3, 8001638 <_vfiprintf_r+0x18>
 8001634:	f7ff ff4e 	bl	80014d4 <__sinit>
 8001638:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800163a:	07d9      	lsls	r1, r3, #31
 800163c:	d405      	bmi.n	800164a <_vfiprintf_r+0x2a>
 800163e:	89ab      	ldrh	r3, [r5, #12]
 8001640:	059a      	lsls	r2, r3, #22
 8001642:	d402      	bmi.n	800164a <_vfiprintf_r+0x2a>
 8001644:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001646:	f7ff ffc0 	bl	80015ca <__retarget_lock_acquire_recursive>
 800164a:	89ab      	ldrh	r3, [r5, #12]
 800164c:	071b      	lsls	r3, r3, #28
 800164e:	d501      	bpl.n	8001654 <_vfiprintf_r+0x34>
 8001650:	692b      	ldr	r3, [r5, #16]
 8001652:	b99b      	cbnz	r3, 800167c <_vfiprintf_r+0x5c>
 8001654:	4629      	mov	r1, r5
 8001656:	4630      	mov	r0, r6
 8001658:	f000 fc66 	bl	8001f28 <__swsetup_r>
 800165c:	b170      	cbz	r0, 800167c <_vfiprintf_r+0x5c>
 800165e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001660:	07dc      	lsls	r4, r3, #31
 8001662:	d504      	bpl.n	800166e <_vfiprintf_r+0x4e>
 8001664:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001668:	b01d      	add	sp, #116	; 0x74
 800166a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800166e:	89ab      	ldrh	r3, [r5, #12]
 8001670:	0598      	lsls	r0, r3, #22
 8001672:	d4f7      	bmi.n	8001664 <_vfiprintf_r+0x44>
 8001674:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001676:	f7ff ffa9 	bl	80015cc <__retarget_lock_release_recursive>
 800167a:	e7f3      	b.n	8001664 <_vfiprintf_r+0x44>
 800167c:	2300      	movs	r3, #0
 800167e:	9309      	str	r3, [sp, #36]	; 0x24
 8001680:	2320      	movs	r3, #32
 8001682:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001686:	f8cd 800c 	str.w	r8, [sp, #12]
 800168a:	2330      	movs	r3, #48	; 0x30
 800168c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8001840 <_vfiprintf_r+0x220>
 8001690:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001694:	f04f 0901 	mov.w	r9, #1
 8001698:	4623      	mov	r3, r4
 800169a:	469a      	mov	sl, r3
 800169c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80016a0:	b10a      	cbz	r2, 80016a6 <_vfiprintf_r+0x86>
 80016a2:	2a25      	cmp	r2, #37	; 0x25
 80016a4:	d1f9      	bne.n	800169a <_vfiprintf_r+0x7a>
 80016a6:	ebba 0b04 	subs.w	fp, sl, r4
 80016aa:	d00b      	beq.n	80016c4 <_vfiprintf_r+0xa4>
 80016ac:	465b      	mov	r3, fp
 80016ae:	4622      	mov	r2, r4
 80016b0:	4629      	mov	r1, r5
 80016b2:	4630      	mov	r0, r6
 80016b4:	f7ff ffa2 	bl	80015fc <__sfputs_r>
 80016b8:	3001      	adds	r0, #1
 80016ba:	f000 80a9 	beq.w	8001810 <_vfiprintf_r+0x1f0>
 80016be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80016c0:	445a      	add	r2, fp
 80016c2:	9209      	str	r2, [sp, #36]	; 0x24
 80016c4:	f89a 3000 	ldrb.w	r3, [sl]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	f000 80a1 	beq.w	8001810 <_vfiprintf_r+0x1f0>
 80016ce:	2300      	movs	r3, #0
 80016d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80016d8:	f10a 0a01 	add.w	sl, sl, #1
 80016dc:	9304      	str	r3, [sp, #16]
 80016de:	9307      	str	r3, [sp, #28]
 80016e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80016e4:	931a      	str	r3, [sp, #104]	; 0x68
 80016e6:	4654      	mov	r4, sl
 80016e8:	2205      	movs	r2, #5
 80016ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80016ee:	4854      	ldr	r0, [pc, #336]	; (8001840 <_vfiprintf_r+0x220>)
 80016f0:	f7fe fd6e 	bl	80001d0 <memchr>
 80016f4:	9a04      	ldr	r2, [sp, #16]
 80016f6:	b9d8      	cbnz	r0, 8001730 <_vfiprintf_r+0x110>
 80016f8:	06d1      	lsls	r1, r2, #27
 80016fa:	bf44      	itt	mi
 80016fc:	2320      	movmi	r3, #32
 80016fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001702:	0713      	lsls	r3, r2, #28
 8001704:	bf44      	itt	mi
 8001706:	232b      	movmi	r3, #43	; 0x2b
 8001708:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800170c:	f89a 3000 	ldrb.w	r3, [sl]
 8001710:	2b2a      	cmp	r3, #42	; 0x2a
 8001712:	d015      	beq.n	8001740 <_vfiprintf_r+0x120>
 8001714:	9a07      	ldr	r2, [sp, #28]
 8001716:	4654      	mov	r4, sl
 8001718:	2000      	movs	r0, #0
 800171a:	f04f 0c0a 	mov.w	ip, #10
 800171e:	4621      	mov	r1, r4
 8001720:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001724:	3b30      	subs	r3, #48	; 0x30
 8001726:	2b09      	cmp	r3, #9
 8001728:	d94d      	bls.n	80017c6 <_vfiprintf_r+0x1a6>
 800172a:	b1b0      	cbz	r0, 800175a <_vfiprintf_r+0x13a>
 800172c:	9207      	str	r2, [sp, #28]
 800172e:	e014      	b.n	800175a <_vfiprintf_r+0x13a>
 8001730:	eba0 0308 	sub.w	r3, r0, r8
 8001734:	fa09 f303 	lsl.w	r3, r9, r3
 8001738:	4313      	orrs	r3, r2
 800173a:	9304      	str	r3, [sp, #16]
 800173c:	46a2      	mov	sl, r4
 800173e:	e7d2      	b.n	80016e6 <_vfiprintf_r+0xc6>
 8001740:	9b03      	ldr	r3, [sp, #12]
 8001742:	1d19      	adds	r1, r3, #4
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	9103      	str	r1, [sp, #12]
 8001748:	2b00      	cmp	r3, #0
 800174a:	bfbb      	ittet	lt
 800174c:	425b      	neglt	r3, r3
 800174e:	f042 0202 	orrlt.w	r2, r2, #2
 8001752:	9307      	strge	r3, [sp, #28]
 8001754:	9307      	strlt	r3, [sp, #28]
 8001756:	bfb8      	it	lt
 8001758:	9204      	strlt	r2, [sp, #16]
 800175a:	7823      	ldrb	r3, [r4, #0]
 800175c:	2b2e      	cmp	r3, #46	; 0x2e
 800175e:	d10c      	bne.n	800177a <_vfiprintf_r+0x15a>
 8001760:	7863      	ldrb	r3, [r4, #1]
 8001762:	2b2a      	cmp	r3, #42	; 0x2a
 8001764:	d134      	bne.n	80017d0 <_vfiprintf_r+0x1b0>
 8001766:	9b03      	ldr	r3, [sp, #12]
 8001768:	1d1a      	adds	r2, r3, #4
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	9203      	str	r2, [sp, #12]
 800176e:	2b00      	cmp	r3, #0
 8001770:	bfb8      	it	lt
 8001772:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8001776:	3402      	adds	r4, #2
 8001778:	9305      	str	r3, [sp, #20]
 800177a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8001850 <_vfiprintf_r+0x230>
 800177e:	7821      	ldrb	r1, [r4, #0]
 8001780:	2203      	movs	r2, #3
 8001782:	4650      	mov	r0, sl
 8001784:	f7fe fd24 	bl	80001d0 <memchr>
 8001788:	b138      	cbz	r0, 800179a <_vfiprintf_r+0x17a>
 800178a:	9b04      	ldr	r3, [sp, #16]
 800178c:	eba0 000a 	sub.w	r0, r0, sl
 8001790:	2240      	movs	r2, #64	; 0x40
 8001792:	4082      	lsls	r2, r0
 8001794:	4313      	orrs	r3, r2
 8001796:	3401      	adds	r4, #1
 8001798:	9304      	str	r3, [sp, #16]
 800179a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800179e:	4829      	ldr	r0, [pc, #164]	; (8001844 <_vfiprintf_r+0x224>)
 80017a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80017a4:	2206      	movs	r2, #6
 80017a6:	f7fe fd13 	bl	80001d0 <memchr>
 80017aa:	2800      	cmp	r0, #0
 80017ac:	d03f      	beq.n	800182e <_vfiprintf_r+0x20e>
 80017ae:	4b26      	ldr	r3, [pc, #152]	; (8001848 <_vfiprintf_r+0x228>)
 80017b0:	bb1b      	cbnz	r3, 80017fa <_vfiprintf_r+0x1da>
 80017b2:	9b03      	ldr	r3, [sp, #12]
 80017b4:	3307      	adds	r3, #7
 80017b6:	f023 0307 	bic.w	r3, r3, #7
 80017ba:	3308      	adds	r3, #8
 80017bc:	9303      	str	r3, [sp, #12]
 80017be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80017c0:	443b      	add	r3, r7
 80017c2:	9309      	str	r3, [sp, #36]	; 0x24
 80017c4:	e768      	b.n	8001698 <_vfiprintf_r+0x78>
 80017c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80017ca:	460c      	mov	r4, r1
 80017cc:	2001      	movs	r0, #1
 80017ce:	e7a6      	b.n	800171e <_vfiprintf_r+0xfe>
 80017d0:	2300      	movs	r3, #0
 80017d2:	3401      	adds	r4, #1
 80017d4:	9305      	str	r3, [sp, #20]
 80017d6:	4619      	mov	r1, r3
 80017d8:	f04f 0c0a 	mov.w	ip, #10
 80017dc:	4620      	mov	r0, r4
 80017de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80017e2:	3a30      	subs	r2, #48	; 0x30
 80017e4:	2a09      	cmp	r2, #9
 80017e6:	d903      	bls.n	80017f0 <_vfiprintf_r+0x1d0>
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d0c6      	beq.n	800177a <_vfiprintf_r+0x15a>
 80017ec:	9105      	str	r1, [sp, #20]
 80017ee:	e7c4      	b.n	800177a <_vfiprintf_r+0x15a>
 80017f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80017f4:	4604      	mov	r4, r0
 80017f6:	2301      	movs	r3, #1
 80017f8:	e7f0      	b.n	80017dc <_vfiprintf_r+0x1bc>
 80017fa:	ab03      	add	r3, sp, #12
 80017fc:	9300      	str	r3, [sp, #0]
 80017fe:	462a      	mov	r2, r5
 8001800:	4b12      	ldr	r3, [pc, #72]	; (800184c <_vfiprintf_r+0x22c>)
 8001802:	a904      	add	r1, sp, #16
 8001804:	4630      	mov	r0, r6
 8001806:	f3af 8000 	nop.w
 800180a:	4607      	mov	r7, r0
 800180c:	1c78      	adds	r0, r7, #1
 800180e:	d1d6      	bne.n	80017be <_vfiprintf_r+0x19e>
 8001810:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001812:	07d9      	lsls	r1, r3, #31
 8001814:	d405      	bmi.n	8001822 <_vfiprintf_r+0x202>
 8001816:	89ab      	ldrh	r3, [r5, #12]
 8001818:	059a      	lsls	r2, r3, #22
 800181a:	d402      	bmi.n	8001822 <_vfiprintf_r+0x202>
 800181c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800181e:	f7ff fed5 	bl	80015cc <__retarget_lock_release_recursive>
 8001822:	89ab      	ldrh	r3, [r5, #12]
 8001824:	065b      	lsls	r3, r3, #25
 8001826:	f53f af1d 	bmi.w	8001664 <_vfiprintf_r+0x44>
 800182a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800182c:	e71c      	b.n	8001668 <_vfiprintf_r+0x48>
 800182e:	ab03      	add	r3, sp, #12
 8001830:	9300      	str	r3, [sp, #0]
 8001832:	462a      	mov	r2, r5
 8001834:	4b05      	ldr	r3, [pc, #20]	; (800184c <_vfiprintf_r+0x22c>)
 8001836:	a904      	add	r1, sp, #16
 8001838:	4630      	mov	r0, r6
 800183a:	f000 f919 	bl	8001a70 <_printf_i>
 800183e:	e7e4      	b.n	800180a <_vfiprintf_r+0x1ea>
 8001840:	0800223c 	.word	0x0800223c
 8001844:	08002246 	.word	0x08002246
 8001848:	00000000 	.word	0x00000000
 800184c:	080015fd 	.word	0x080015fd
 8001850:	08002242 	.word	0x08002242

08001854 <sbrk_aligned>:
 8001854:	b570      	push	{r4, r5, r6, lr}
 8001856:	4e0e      	ldr	r6, [pc, #56]	; (8001890 <sbrk_aligned+0x3c>)
 8001858:	460c      	mov	r4, r1
 800185a:	6831      	ldr	r1, [r6, #0]
 800185c:	4605      	mov	r5, r0
 800185e:	b911      	cbnz	r1, 8001866 <sbrk_aligned+0x12>
 8001860:	f000 fc72 	bl	8002148 <_sbrk_r>
 8001864:	6030      	str	r0, [r6, #0]
 8001866:	4621      	mov	r1, r4
 8001868:	4628      	mov	r0, r5
 800186a:	f000 fc6d 	bl	8002148 <_sbrk_r>
 800186e:	1c43      	adds	r3, r0, #1
 8001870:	d00a      	beq.n	8001888 <sbrk_aligned+0x34>
 8001872:	1cc4      	adds	r4, r0, #3
 8001874:	f024 0403 	bic.w	r4, r4, #3
 8001878:	42a0      	cmp	r0, r4
 800187a:	d007      	beq.n	800188c <sbrk_aligned+0x38>
 800187c:	1a21      	subs	r1, r4, r0
 800187e:	4628      	mov	r0, r5
 8001880:	f000 fc62 	bl	8002148 <_sbrk_r>
 8001884:	3001      	adds	r0, #1
 8001886:	d101      	bne.n	800188c <sbrk_aligned+0x38>
 8001888:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800188c:	4620      	mov	r0, r4
 800188e:	bd70      	pop	{r4, r5, r6, pc}
 8001890:	200001c8 	.word	0x200001c8

08001894 <_malloc_r>:
 8001894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001898:	1ccd      	adds	r5, r1, #3
 800189a:	f025 0503 	bic.w	r5, r5, #3
 800189e:	3508      	adds	r5, #8
 80018a0:	2d0c      	cmp	r5, #12
 80018a2:	bf38      	it	cc
 80018a4:	250c      	movcc	r5, #12
 80018a6:	2d00      	cmp	r5, #0
 80018a8:	4607      	mov	r7, r0
 80018aa:	db01      	blt.n	80018b0 <_malloc_r+0x1c>
 80018ac:	42a9      	cmp	r1, r5
 80018ae:	d905      	bls.n	80018bc <_malloc_r+0x28>
 80018b0:	230c      	movs	r3, #12
 80018b2:	603b      	str	r3, [r7, #0]
 80018b4:	2600      	movs	r6, #0
 80018b6:	4630      	mov	r0, r6
 80018b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80018bc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8001990 <_malloc_r+0xfc>
 80018c0:	f000 faa6 	bl	8001e10 <__malloc_lock>
 80018c4:	f8d8 3000 	ldr.w	r3, [r8]
 80018c8:	461c      	mov	r4, r3
 80018ca:	bb5c      	cbnz	r4, 8001924 <_malloc_r+0x90>
 80018cc:	4629      	mov	r1, r5
 80018ce:	4638      	mov	r0, r7
 80018d0:	f7ff ffc0 	bl	8001854 <sbrk_aligned>
 80018d4:	1c43      	adds	r3, r0, #1
 80018d6:	4604      	mov	r4, r0
 80018d8:	d155      	bne.n	8001986 <_malloc_r+0xf2>
 80018da:	f8d8 4000 	ldr.w	r4, [r8]
 80018de:	4626      	mov	r6, r4
 80018e0:	2e00      	cmp	r6, #0
 80018e2:	d145      	bne.n	8001970 <_malloc_r+0xdc>
 80018e4:	2c00      	cmp	r4, #0
 80018e6:	d048      	beq.n	800197a <_malloc_r+0xe6>
 80018e8:	6823      	ldr	r3, [r4, #0]
 80018ea:	4631      	mov	r1, r6
 80018ec:	4638      	mov	r0, r7
 80018ee:	eb04 0903 	add.w	r9, r4, r3
 80018f2:	f000 fc29 	bl	8002148 <_sbrk_r>
 80018f6:	4581      	cmp	r9, r0
 80018f8:	d13f      	bne.n	800197a <_malloc_r+0xe6>
 80018fa:	6821      	ldr	r1, [r4, #0]
 80018fc:	1a6d      	subs	r5, r5, r1
 80018fe:	4629      	mov	r1, r5
 8001900:	4638      	mov	r0, r7
 8001902:	f7ff ffa7 	bl	8001854 <sbrk_aligned>
 8001906:	3001      	adds	r0, #1
 8001908:	d037      	beq.n	800197a <_malloc_r+0xe6>
 800190a:	6823      	ldr	r3, [r4, #0]
 800190c:	442b      	add	r3, r5
 800190e:	6023      	str	r3, [r4, #0]
 8001910:	f8d8 3000 	ldr.w	r3, [r8]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d038      	beq.n	800198a <_malloc_r+0xf6>
 8001918:	685a      	ldr	r2, [r3, #4]
 800191a:	42a2      	cmp	r2, r4
 800191c:	d12b      	bne.n	8001976 <_malloc_r+0xe2>
 800191e:	2200      	movs	r2, #0
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	e00f      	b.n	8001944 <_malloc_r+0xb0>
 8001924:	6822      	ldr	r2, [r4, #0]
 8001926:	1b52      	subs	r2, r2, r5
 8001928:	d41f      	bmi.n	800196a <_malloc_r+0xd6>
 800192a:	2a0b      	cmp	r2, #11
 800192c:	d917      	bls.n	800195e <_malloc_r+0xca>
 800192e:	1961      	adds	r1, r4, r5
 8001930:	42a3      	cmp	r3, r4
 8001932:	6025      	str	r5, [r4, #0]
 8001934:	bf18      	it	ne
 8001936:	6059      	strne	r1, [r3, #4]
 8001938:	6863      	ldr	r3, [r4, #4]
 800193a:	bf08      	it	eq
 800193c:	f8c8 1000 	streq.w	r1, [r8]
 8001940:	5162      	str	r2, [r4, r5]
 8001942:	604b      	str	r3, [r1, #4]
 8001944:	4638      	mov	r0, r7
 8001946:	f104 060b 	add.w	r6, r4, #11
 800194a:	f000 fa67 	bl	8001e1c <__malloc_unlock>
 800194e:	f026 0607 	bic.w	r6, r6, #7
 8001952:	1d23      	adds	r3, r4, #4
 8001954:	1af2      	subs	r2, r6, r3
 8001956:	d0ae      	beq.n	80018b6 <_malloc_r+0x22>
 8001958:	1b9b      	subs	r3, r3, r6
 800195a:	50a3      	str	r3, [r4, r2]
 800195c:	e7ab      	b.n	80018b6 <_malloc_r+0x22>
 800195e:	42a3      	cmp	r3, r4
 8001960:	6862      	ldr	r2, [r4, #4]
 8001962:	d1dd      	bne.n	8001920 <_malloc_r+0x8c>
 8001964:	f8c8 2000 	str.w	r2, [r8]
 8001968:	e7ec      	b.n	8001944 <_malloc_r+0xb0>
 800196a:	4623      	mov	r3, r4
 800196c:	6864      	ldr	r4, [r4, #4]
 800196e:	e7ac      	b.n	80018ca <_malloc_r+0x36>
 8001970:	4634      	mov	r4, r6
 8001972:	6876      	ldr	r6, [r6, #4]
 8001974:	e7b4      	b.n	80018e0 <_malloc_r+0x4c>
 8001976:	4613      	mov	r3, r2
 8001978:	e7cc      	b.n	8001914 <_malloc_r+0x80>
 800197a:	230c      	movs	r3, #12
 800197c:	603b      	str	r3, [r7, #0]
 800197e:	4638      	mov	r0, r7
 8001980:	f000 fa4c 	bl	8001e1c <__malloc_unlock>
 8001984:	e797      	b.n	80018b6 <_malloc_r+0x22>
 8001986:	6025      	str	r5, [r4, #0]
 8001988:	e7dc      	b.n	8001944 <_malloc_r+0xb0>
 800198a:	605b      	str	r3, [r3, #4]
 800198c:	deff      	udf	#255	; 0xff
 800198e:	bf00      	nop
 8001990:	200001c4 	.word	0x200001c4

08001994 <_printf_common>:
 8001994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001998:	4616      	mov	r6, r2
 800199a:	4699      	mov	r9, r3
 800199c:	688a      	ldr	r2, [r1, #8]
 800199e:	690b      	ldr	r3, [r1, #16]
 80019a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80019a4:	4293      	cmp	r3, r2
 80019a6:	bfb8      	it	lt
 80019a8:	4613      	movlt	r3, r2
 80019aa:	6033      	str	r3, [r6, #0]
 80019ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80019b0:	4607      	mov	r7, r0
 80019b2:	460c      	mov	r4, r1
 80019b4:	b10a      	cbz	r2, 80019ba <_printf_common+0x26>
 80019b6:	3301      	adds	r3, #1
 80019b8:	6033      	str	r3, [r6, #0]
 80019ba:	6823      	ldr	r3, [r4, #0]
 80019bc:	0699      	lsls	r1, r3, #26
 80019be:	bf42      	ittt	mi
 80019c0:	6833      	ldrmi	r3, [r6, #0]
 80019c2:	3302      	addmi	r3, #2
 80019c4:	6033      	strmi	r3, [r6, #0]
 80019c6:	6825      	ldr	r5, [r4, #0]
 80019c8:	f015 0506 	ands.w	r5, r5, #6
 80019cc:	d106      	bne.n	80019dc <_printf_common+0x48>
 80019ce:	f104 0a19 	add.w	sl, r4, #25
 80019d2:	68e3      	ldr	r3, [r4, #12]
 80019d4:	6832      	ldr	r2, [r6, #0]
 80019d6:	1a9b      	subs	r3, r3, r2
 80019d8:	42ab      	cmp	r3, r5
 80019da:	dc26      	bgt.n	8001a2a <_printf_common+0x96>
 80019dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80019e0:	1e13      	subs	r3, r2, #0
 80019e2:	6822      	ldr	r2, [r4, #0]
 80019e4:	bf18      	it	ne
 80019e6:	2301      	movne	r3, #1
 80019e8:	0692      	lsls	r2, r2, #26
 80019ea:	d42b      	bmi.n	8001a44 <_printf_common+0xb0>
 80019ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80019f0:	4649      	mov	r1, r9
 80019f2:	4638      	mov	r0, r7
 80019f4:	47c0      	blx	r8
 80019f6:	3001      	adds	r0, #1
 80019f8:	d01e      	beq.n	8001a38 <_printf_common+0xa4>
 80019fa:	6823      	ldr	r3, [r4, #0]
 80019fc:	6922      	ldr	r2, [r4, #16]
 80019fe:	f003 0306 	and.w	r3, r3, #6
 8001a02:	2b04      	cmp	r3, #4
 8001a04:	bf02      	ittt	eq
 8001a06:	68e5      	ldreq	r5, [r4, #12]
 8001a08:	6833      	ldreq	r3, [r6, #0]
 8001a0a:	1aed      	subeq	r5, r5, r3
 8001a0c:	68a3      	ldr	r3, [r4, #8]
 8001a0e:	bf0c      	ite	eq
 8001a10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001a14:	2500      	movne	r5, #0
 8001a16:	4293      	cmp	r3, r2
 8001a18:	bfc4      	itt	gt
 8001a1a:	1a9b      	subgt	r3, r3, r2
 8001a1c:	18ed      	addgt	r5, r5, r3
 8001a1e:	2600      	movs	r6, #0
 8001a20:	341a      	adds	r4, #26
 8001a22:	42b5      	cmp	r5, r6
 8001a24:	d11a      	bne.n	8001a5c <_printf_common+0xc8>
 8001a26:	2000      	movs	r0, #0
 8001a28:	e008      	b.n	8001a3c <_printf_common+0xa8>
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	4652      	mov	r2, sl
 8001a2e:	4649      	mov	r1, r9
 8001a30:	4638      	mov	r0, r7
 8001a32:	47c0      	blx	r8
 8001a34:	3001      	adds	r0, #1
 8001a36:	d103      	bne.n	8001a40 <_printf_common+0xac>
 8001a38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a40:	3501      	adds	r5, #1
 8001a42:	e7c6      	b.n	80019d2 <_printf_common+0x3e>
 8001a44:	18e1      	adds	r1, r4, r3
 8001a46:	1c5a      	adds	r2, r3, #1
 8001a48:	2030      	movs	r0, #48	; 0x30
 8001a4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001a4e:	4422      	add	r2, r4
 8001a50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001a54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001a58:	3302      	adds	r3, #2
 8001a5a:	e7c7      	b.n	80019ec <_printf_common+0x58>
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	4622      	mov	r2, r4
 8001a60:	4649      	mov	r1, r9
 8001a62:	4638      	mov	r0, r7
 8001a64:	47c0      	blx	r8
 8001a66:	3001      	adds	r0, #1
 8001a68:	d0e6      	beq.n	8001a38 <_printf_common+0xa4>
 8001a6a:	3601      	adds	r6, #1
 8001a6c:	e7d9      	b.n	8001a22 <_printf_common+0x8e>
	...

08001a70 <_printf_i>:
 8001a70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001a74:	7e0f      	ldrb	r7, [r1, #24]
 8001a76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001a78:	2f78      	cmp	r7, #120	; 0x78
 8001a7a:	4691      	mov	r9, r2
 8001a7c:	4680      	mov	r8, r0
 8001a7e:	460c      	mov	r4, r1
 8001a80:	469a      	mov	sl, r3
 8001a82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001a86:	d807      	bhi.n	8001a98 <_printf_i+0x28>
 8001a88:	2f62      	cmp	r7, #98	; 0x62
 8001a8a:	d80a      	bhi.n	8001aa2 <_printf_i+0x32>
 8001a8c:	2f00      	cmp	r7, #0
 8001a8e:	f000 80d4 	beq.w	8001c3a <_printf_i+0x1ca>
 8001a92:	2f58      	cmp	r7, #88	; 0x58
 8001a94:	f000 80c0 	beq.w	8001c18 <_printf_i+0x1a8>
 8001a98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001a9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001aa0:	e03a      	b.n	8001b18 <_printf_i+0xa8>
 8001aa2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001aa6:	2b15      	cmp	r3, #21
 8001aa8:	d8f6      	bhi.n	8001a98 <_printf_i+0x28>
 8001aaa:	a101      	add	r1, pc, #4	; (adr r1, 8001ab0 <_printf_i+0x40>)
 8001aac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001ab0:	08001b09 	.word	0x08001b09
 8001ab4:	08001b1d 	.word	0x08001b1d
 8001ab8:	08001a99 	.word	0x08001a99
 8001abc:	08001a99 	.word	0x08001a99
 8001ac0:	08001a99 	.word	0x08001a99
 8001ac4:	08001a99 	.word	0x08001a99
 8001ac8:	08001b1d 	.word	0x08001b1d
 8001acc:	08001a99 	.word	0x08001a99
 8001ad0:	08001a99 	.word	0x08001a99
 8001ad4:	08001a99 	.word	0x08001a99
 8001ad8:	08001a99 	.word	0x08001a99
 8001adc:	08001c21 	.word	0x08001c21
 8001ae0:	08001b49 	.word	0x08001b49
 8001ae4:	08001bdb 	.word	0x08001bdb
 8001ae8:	08001a99 	.word	0x08001a99
 8001aec:	08001a99 	.word	0x08001a99
 8001af0:	08001c43 	.word	0x08001c43
 8001af4:	08001a99 	.word	0x08001a99
 8001af8:	08001b49 	.word	0x08001b49
 8001afc:	08001a99 	.word	0x08001a99
 8001b00:	08001a99 	.word	0x08001a99
 8001b04:	08001be3 	.word	0x08001be3
 8001b08:	682b      	ldr	r3, [r5, #0]
 8001b0a:	1d1a      	adds	r2, r3, #4
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	602a      	str	r2, [r5, #0]
 8001b10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001b14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e09f      	b.n	8001c5c <_printf_i+0x1ec>
 8001b1c:	6820      	ldr	r0, [r4, #0]
 8001b1e:	682b      	ldr	r3, [r5, #0]
 8001b20:	0607      	lsls	r7, r0, #24
 8001b22:	f103 0104 	add.w	r1, r3, #4
 8001b26:	6029      	str	r1, [r5, #0]
 8001b28:	d501      	bpl.n	8001b2e <_printf_i+0xbe>
 8001b2a:	681e      	ldr	r6, [r3, #0]
 8001b2c:	e003      	b.n	8001b36 <_printf_i+0xc6>
 8001b2e:	0646      	lsls	r6, r0, #25
 8001b30:	d5fb      	bpl.n	8001b2a <_printf_i+0xba>
 8001b32:	f9b3 6000 	ldrsh.w	r6, [r3]
 8001b36:	2e00      	cmp	r6, #0
 8001b38:	da03      	bge.n	8001b42 <_printf_i+0xd2>
 8001b3a:	232d      	movs	r3, #45	; 0x2d
 8001b3c:	4276      	negs	r6, r6
 8001b3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001b42:	485a      	ldr	r0, [pc, #360]	; (8001cac <_printf_i+0x23c>)
 8001b44:	230a      	movs	r3, #10
 8001b46:	e012      	b.n	8001b6e <_printf_i+0xfe>
 8001b48:	682b      	ldr	r3, [r5, #0]
 8001b4a:	6820      	ldr	r0, [r4, #0]
 8001b4c:	1d19      	adds	r1, r3, #4
 8001b4e:	6029      	str	r1, [r5, #0]
 8001b50:	0605      	lsls	r5, r0, #24
 8001b52:	d501      	bpl.n	8001b58 <_printf_i+0xe8>
 8001b54:	681e      	ldr	r6, [r3, #0]
 8001b56:	e002      	b.n	8001b5e <_printf_i+0xee>
 8001b58:	0641      	lsls	r1, r0, #25
 8001b5a:	d5fb      	bpl.n	8001b54 <_printf_i+0xe4>
 8001b5c:	881e      	ldrh	r6, [r3, #0]
 8001b5e:	4853      	ldr	r0, [pc, #332]	; (8001cac <_printf_i+0x23c>)
 8001b60:	2f6f      	cmp	r7, #111	; 0x6f
 8001b62:	bf0c      	ite	eq
 8001b64:	2308      	moveq	r3, #8
 8001b66:	230a      	movne	r3, #10
 8001b68:	2100      	movs	r1, #0
 8001b6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001b6e:	6865      	ldr	r5, [r4, #4]
 8001b70:	60a5      	str	r5, [r4, #8]
 8001b72:	2d00      	cmp	r5, #0
 8001b74:	bfa2      	ittt	ge
 8001b76:	6821      	ldrge	r1, [r4, #0]
 8001b78:	f021 0104 	bicge.w	r1, r1, #4
 8001b7c:	6021      	strge	r1, [r4, #0]
 8001b7e:	b90e      	cbnz	r6, 8001b84 <_printf_i+0x114>
 8001b80:	2d00      	cmp	r5, #0
 8001b82:	d04b      	beq.n	8001c1c <_printf_i+0x1ac>
 8001b84:	4615      	mov	r5, r2
 8001b86:	fbb6 f1f3 	udiv	r1, r6, r3
 8001b8a:	fb03 6711 	mls	r7, r3, r1, r6
 8001b8e:	5dc7      	ldrb	r7, [r0, r7]
 8001b90:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001b94:	4637      	mov	r7, r6
 8001b96:	42bb      	cmp	r3, r7
 8001b98:	460e      	mov	r6, r1
 8001b9a:	d9f4      	bls.n	8001b86 <_printf_i+0x116>
 8001b9c:	2b08      	cmp	r3, #8
 8001b9e:	d10b      	bne.n	8001bb8 <_printf_i+0x148>
 8001ba0:	6823      	ldr	r3, [r4, #0]
 8001ba2:	07de      	lsls	r6, r3, #31
 8001ba4:	d508      	bpl.n	8001bb8 <_printf_i+0x148>
 8001ba6:	6923      	ldr	r3, [r4, #16]
 8001ba8:	6861      	ldr	r1, [r4, #4]
 8001baa:	4299      	cmp	r1, r3
 8001bac:	bfde      	ittt	le
 8001bae:	2330      	movle	r3, #48	; 0x30
 8001bb0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001bb4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8001bb8:	1b52      	subs	r2, r2, r5
 8001bba:	6122      	str	r2, [r4, #16]
 8001bbc:	f8cd a000 	str.w	sl, [sp]
 8001bc0:	464b      	mov	r3, r9
 8001bc2:	aa03      	add	r2, sp, #12
 8001bc4:	4621      	mov	r1, r4
 8001bc6:	4640      	mov	r0, r8
 8001bc8:	f7ff fee4 	bl	8001994 <_printf_common>
 8001bcc:	3001      	adds	r0, #1
 8001bce:	d14a      	bne.n	8001c66 <_printf_i+0x1f6>
 8001bd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001bd4:	b004      	add	sp, #16
 8001bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001bda:	6823      	ldr	r3, [r4, #0]
 8001bdc:	f043 0320 	orr.w	r3, r3, #32
 8001be0:	6023      	str	r3, [r4, #0]
 8001be2:	4833      	ldr	r0, [pc, #204]	; (8001cb0 <_printf_i+0x240>)
 8001be4:	2778      	movs	r7, #120	; 0x78
 8001be6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001bea:	6823      	ldr	r3, [r4, #0]
 8001bec:	6829      	ldr	r1, [r5, #0]
 8001bee:	061f      	lsls	r7, r3, #24
 8001bf0:	f851 6b04 	ldr.w	r6, [r1], #4
 8001bf4:	d402      	bmi.n	8001bfc <_printf_i+0x18c>
 8001bf6:	065f      	lsls	r7, r3, #25
 8001bf8:	bf48      	it	mi
 8001bfa:	b2b6      	uxthmi	r6, r6
 8001bfc:	07df      	lsls	r7, r3, #31
 8001bfe:	bf48      	it	mi
 8001c00:	f043 0320 	orrmi.w	r3, r3, #32
 8001c04:	6029      	str	r1, [r5, #0]
 8001c06:	bf48      	it	mi
 8001c08:	6023      	strmi	r3, [r4, #0]
 8001c0a:	b91e      	cbnz	r6, 8001c14 <_printf_i+0x1a4>
 8001c0c:	6823      	ldr	r3, [r4, #0]
 8001c0e:	f023 0320 	bic.w	r3, r3, #32
 8001c12:	6023      	str	r3, [r4, #0]
 8001c14:	2310      	movs	r3, #16
 8001c16:	e7a7      	b.n	8001b68 <_printf_i+0xf8>
 8001c18:	4824      	ldr	r0, [pc, #144]	; (8001cac <_printf_i+0x23c>)
 8001c1a:	e7e4      	b.n	8001be6 <_printf_i+0x176>
 8001c1c:	4615      	mov	r5, r2
 8001c1e:	e7bd      	b.n	8001b9c <_printf_i+0x12c>
 8001c20:	682b      	ldr	r3, [r5, #0]
 8001c22:	6826      	ldr	r6, [r4, #0]
 8001c24:	6961      	ldr	r1, [r4, #20]
 8001c26:	1d18      	adds	r0, r3, #4
 8001c28:	6028      	str	r0, [r5, #0]
 8001c2a:	0635      	lsls	r5, r6, #24
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	d501      	bpl.n	8001c34 <_printf_i+0x1c4>
 8001c30:	6019      	str	r1, [r3, #0]
 8001c32:	e002      	b.n	8001c3a <_printf_i+0x1ca>
 8001c34:	0670      	lsls	r0, r6, #25
 8001c36:	d5fb      	bpl.n	8001c30 <_printf_i+0x1c0>
 8001c38:	8019      	strh	r1, [r3, #0]
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	6123      	str	r3, [r4, #16]
 8001c3e:	4615      	mov	r5, r2
 8001c40:	e7bc      	b.n	8001bbc <_printf_i+0x14c>
 8001c42:	682b      	ldr	r3, [r5, #0]
 8001c44:	1d1a      	adds	r2, r3, #4
 8001c46:	602a      	str	r2, [r5, #0]
 8001c48:	681d      	ldr	r5, [r3, #0]
 8001c4a:	6862      	ldr	r2, [r4, #4]
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	4628      	mov	r0, r5
 8001c50:	f7fe fabe 	bl	80001d0 <memchr>
 8001c54:	b108      	cbz	r0, 8001c5a <_printf_i+0x1ea>
 8001c56:	1b40      	subs	r0, r0, r5
 8001c58:	6060      	str	r0, [r4, #4]
 8001c5a:	6863      	ldr	r3, [r4, #4]
 8001c5c:	6123      	str	r3, [r4, #16]
 8001c5e:	2300      	movs	r3, #0
 8001c60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001c64:	e7aa      	b.n	8001bbc <_printf_i+0x14c>
 8001c66:	6923      	ldr	r3, [r4, #16]
 8001c68:	462a      	mov	r2, r5
 8001c6a:	4649      	mov	r1, r9
 8001c6c:	4640      	mov	r0, r8
 8001c6e:	47d0      	blx	sl
 8001c70:	3001      	adds	r0, #1
 8001c72:	d0ad      	beq.n	8001bd0 <_printf_i+0x160>
 8001c74:	6823      	ldr	r3, [r4, #0]
 8001c76:	079b      	lsls	r3, r3, #30
 8001c78:	d413      	bmi.n	8001ca2 <_printf_i+0x232>
 8001c7a:	68e0      	ldr	r0, [r4, #12]
 8001c7c:	9b03      	ldr	r3, [sp, #12]
 8001c7e:	4298      	cmp	r0, r3
 8001c80:	bfb8      	it	lt
 8001c82:	4618      	movlt	r0, r3
 8001c84:	e7a6      	b.n	8001bd4 <_printf_i+0x164>
 8001c86:	2301      	movs	r3, #1
 8001c88:	4632      	mov	r2, r6
 8001c8a:	4649      	mov	r1, r9
 8001c8c:	4640      	mov	r0, r8
 8001c8e:	47d0      	blx	sl
 8001c90:	3001      	adds	r0, #1
 8001c92:	d09d      	beq.n	8001bd0 <_printf_i+0x160>
 8001c94:	3501      	adds	r5, #1
 8001c96:	68e3      	ldr	r3, [r4, #12]
 8001c98:	9903      	ldr	r1, [sp, #12]
 8001c9a:	1a5b      	subs	r3, r3, r1
 8001c9c:	42ab      	cmp	r3, r5
 8001c9e:	dcf2      	bgt.n	8001c86 <_printf_i+0x216>
 8001ca0:	e7eb      	b.n	8001c7a <_printf_i+0x20a>
 8001ca2:	2500      	movs	r5, #0
 8001ca4:	f104 0619 	add.w	r6, r4, #25
 8001ca8:	e7f5      	b.n	8001c96 <_printf_i+0x226>
 8001caa:	bf00      	nop
 8001cac:	0800224d 	.word	0x0800224d
 8001cb0:	0800225e 	.word	0x0800225e

08001cb4 <__sflush_r>:
 8001cb4:	898a      	ldrh	r2, [r1, #12]
 8001cb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cba:	4605      	mov	r5, r0
 8001cbc:	0710      	lsls	r0, r2, #28
 8001cbe:	460c      	mov	r4, r1
 8001cc0:	d458      	bmi.n	8001d74 <__sflush_r+0xc0>
 8001cc2:	684b      	ldr	r3, [r1, #4]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	dc05      	bgt.n	8001cd4 <__sflush_r+0x20>
 8001cc8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	dc02      	bgt.n	8001cd4 <__sflush_r+0x20>
 8001cce:	2000      	movs	r0, #0
 8001cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001cd4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001cd6:	2e00      	cmp	r6, #0
 8001cd8:	d0f9      	beq.n	8001cce <__sflush_r+0x1a>
 8001cda:	2300      	movs	r3, #0
 8001cdc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001ce0:	682f      	ldr	r7, [r5, #0]
 8001ce2:	6a21      	ldr	r1, [r4, #32]
 8001ce4:	602b      	str	r3, [r5, #0]
 8001ce6:	d032      	beq.n	8001d4e <__sflush_r+0x9a>
 8001ce8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001cea:	89a3      	ldrh	r3, [r4, #12]
 8001cec:	075a      	lsls	r2, r3, #29
 8001cee:	d505      	bpl.n	8001cfc <__sflush_r+0x48>
 8001cf0:	6863      	ldr	r3, [r4, #4]
 8001cf2:	1ac0      	subs	r0, r0, r3
 8001cf4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001cf6:	b10b      	cbz	r3, 8001cfc <__sflush_r+0x48>
 8001cf8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001cfa:	1ac0      	subs	r0, r0, r3
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	4602      	mov	r2, r0
 8001d00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001d02:	6a21      	ldr	r1, [r4, #32]
 8001d04:	4628      	mov	r0, r5
 8001d06:	47b0      	blx	r6
 8001d08:	1c43      	adds	r3, r0, #1
 8001d0a:	89a3      	ldrh	r3, [r4, #12]
 8001d0c:	d106      	bne.n	8001d1c <__sflush_r+0x68>
 8001d0e:	6829      	ldr	r1, [r5, #0]
 8001d10:	291d      	cmp	r1, #29
 8001d12:	d82b      	bhi.n	8001d6c <__sflush_r+0xb8>
 8001d14:	4a29      	ldr	r2, [pc, #164]	; (8001dbc <__sflush_r+0x108>)
 8001d16:	410a      	asrs	r2, r1
 8001d18:	07d6      	lsls	r6, r2, #31
 8001d1a:	d427      	bmi.n	8001d6c <__sflush_r+0xb8>
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	6062      	str	r2, [r4, #4]
 8001d20:	04d9      	lsls	r1, r3, #19
 8001d22:	6922      	ldr	r2, [r4, #16]
 8001d24:	6022      	str	r2, [r4, #0]
 8001d26:	d504      	bpl.n	8001d32 <__sflush_r+0x7e>
 8001d28:	1c42      	adds	r2, r0, #1
 8001d2a:	d101      	bne.n	8001d30 <__sflush_r+0x7c>
 8001d2c:	682b      	ldr	r3, [r5, #0]
 8001d2e:	b903      	cbnz	r3, 8001d32 <__sflush_r+0x7e>
 8001d30:	6560      	str	r0, [r4, #84]	; 0x54
 8001d32:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001d34:	602f      	str	r7, [r5, #0]
 8001d36:	2900      	cmp	r1, #0
 8001d38:	d0c9      	beq.n	8001cce <__sflush_r+0x1a>
 8001d3a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001d3e:	4299      	cmp	r1, r3
 8001d40:	d002      	beq.n	8001d48 <__sflush_r+0x94>
 8001d42:	4628      	mov	r0, r5
 8001d44:	f000 fa22 	bl	800218c <_free_r>
 8001d48:	2000      	movs	r0, #0
 8001d4a:	6360      	str	r0, [r4, #52]	; 0x34
 8001d4c:	e7c0      	b.n	8001cd0 <__sflush_r+0x1c>
 8001d4e:	2301      	movs	r3, #1
 8001d50:	4628      	mov	r0, r5
 8001d52:	47b0      	blx	r6
 8001d54:	1c41      	adds	r1, r0, #1
 8001d56:	d1c8      	bne.n	8001cea <__sflush_r+0x36>
 8001d58:	682b      	ldr	r3, [r5, #0]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d0c5      	beq.n	8001cea <__sflush_r+0x36>
 8001d5e:	2b1d      	cmp	r3, #29
 8001d60:	d001      	beq.n	8001d66 <__sflush_r+0xb2>
 8001d62:	2b16      	cmp	r3, #22
 8001d64:	d101      	bne.n	8001d6a <__sflush_r+0xb6>
 8001d66:	602f      	str	r7, [r5, #0]
 8001d68:	e7b1      	b.n	8001cce <__sflush_r+0x1a>
 8001d6a:	89a3      	ldrh	r3, [r4, #12]
 8001d6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d70:	81a3      	strh	r3, [r4, #12]
 8001d72:	e7ad      	b.n	8001cd0 <__sflush_r+0x1c>
 8001d74:	690f      	ldr	r7, [r1, #16]
 8001d76:	2f00      	cmp	r7, #0
 8001d78:	d0a9      	beq.n	8001cce <__sflush_r+0x1a>
 8001d7a:	0793      	lsls	r3, r2, #30
 8001d7c:	680e      	ldr	r6, [r1, #0]
 8001d7e:	bf08      	it	eq
 8001d80:	694b      	ldreq	r3, [r1, #20]
 8001d82:	600f      	str	r7, [r1, #0]
 8001d84:	bf18      	it	ne
 8001d86:	2300      	movne	r3, #0
 8001d88:	eba6 0807 	sub.w	r8, r6, r7
 8001d8c:	608b      	str	r3, [r1, #8]
 8001d8e:	f1b8 0f00 	cmp.w	r8, #0
 8001d92:	dd9c      	ble.n	8001cce <__sflush_r+0x1a>
 8001d94:	6a21      	ldr	r1, [r4, #32]
 8001d96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001d98:	4643      	mov	r3, r8
 8001d9a:	463a      	mov	r2, r7
 8001d9c:	4628      	mov	r0, r5
 8001d9e:	47b0      	blx	r6
 8001da0:	2800      	cmp	r0, #0
 8001da2:	dc06      	bgt.n	8001db2 <__sflush_r+0xfe>
 8001da4:	89a3      	ldrh	r3, [r4, #12]
 8001da6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001daa:	81a3      	strh	r3, [r4, #12]
 8001dac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001db0:	e78e      	b.n	8001cd0 <__sflush_r+0x1c>
 8001db2:	4407      	add	r7, r0
 8001db4:	eba8 0800 	sub.w	r8, r8, r0
 8001db8:	e7e9      	b.n	8001d8e <__sflush_r+0xda>
 8001dba:	bf00      	nop
 8001dbc:	dfbffffe 	.word	0xdfbffffe

08001dc0 <_fflush_r>:
 8001dc0:	b538      	push	{r3, r4, r5, lr}
 8001dc2:	690b      	ldr	r3, [r1, #16]
 8001dc4:	4605      	mov	r5, r0
 8001dc6:	460c      	mov	r4, r1
 8001dc8:	b913      	cbnz	r3, 8001dd0 <_fflush_r+0x10>
 8001dca:	2500      	movs	r5, #0
 8001dcc:	4628      	mov	r0, r5
 8001dce:	bd38      	pop	{r3, r4, r5, pc}
 8001dd0:	b118      	cbz	r0, 8001dda <_fflush_r+0x1a>
 8001dd2:	6a03      	ldr	r3, [r0, #32]
 8001dd4:	b90b      	cbnz	r3, 8001dda <_fflush_r+0x1a>
 8001dd6:	f7ff fb7d 	bl	80014d4 <__sinit>
 8001dda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d0f3      	beq.n	8001dca <_fflush_r+0xa>
 8001de2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001de4:	07d0      	lsls	r0, r2, #31
 8001de6:	d404      	bmi.n	8001df2 <_fflush_r+0x32>
 8001de8:	0599      	lsls	r1, r3, #22
 8001dea:	d402      	bmi.n	8001df2 <_fflush_r+0x32>
 8001dec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001dee:	f7ff fbec 	bl	80015ca <__retarget_lock_acquire_recursive>
 8001df2:	4628      	mov	r0, r5
 8001df4:	4621      	mov	r1, r4
 8001df6:	f7ff ff5d 	bl	8001cb4 <__sflush_r>
 8001dfa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001dfc:	07da      	lsls	r2, r3, #31
 8001dfe:	4605      	mov	r5, r0
 8001e00:	d4e4      	bmi.n	8001dcc <_fflush_r+0xc>
 8001e02:	89a3      	ldrh	r3, [r4, #12]
 8001e04:	059b      	lsls	r3, r3, #22
 8001e06:	d4e1      	bmi.n	8001dcc <_fflush_r+0xc>
 8001e08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001e0a:	f7ff fbdf 	bl	80015cc <__retarget_lock_release_recursive>
 8001e0e:	e7dd      	b.n	8001dcc <_fflush_r+0xc>

08001e10 <__malloc_lock>:
 8001e10:	4801      	ldr	r0, [pc, #4]	; (8001e18 <__malloc_lock+0x8>)
 8001e12:	f7ff bbda 	b.w	80015ca <__retarget_lock_acquire_recursive>
 8001e16:	bf00      	nop
 8001e18:	200001c0 	.word	0x200001c0

08001e1c <__malloc_unlock>:
 8001e1c:	4801      	ldr	r0, [pc, #4]	; (8001e24 <__malloc_unlock+0x8>)
 8001e1e:	f7ff bbd5 	b.w	80015cc <__retarget_lock_release_recursive>
 8001e22:	bf00      	nop
 8001e24:	200001c0 	.word	0x200001c0

08001e28 <__sread>:
 8001e28:	b510      	push	{r4, lr}
 8001e2a:	460c      	mov	r4, r1
 8001e2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e30:	f000 f978 	bl	8002124 <_read_r>
 8001e34:	2800      	cmp	r0, #0
 8001e36:	bfab      	itete	ge
 8001e38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001e3a:	89a3      	ldrhlt	r3, [r4, #12]
 8001e3c:	181b      	addge	r3, r3, r0
 8001e3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001e42:	bfac      	ite	ge
 8001e44:	6563      	strge	r3, [r4, #84]	; 0x54
 8001e46:	81a3      	strhlt	r3, [r4, #12]
 8001e48:	bd10      	pop	{r4, pc}

08001e4a <__swrite>:
 8001e4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e4e:	461f      	mov	r7, r3
 8001e50:	898b      	ldrh	r3, [r1, #12]
 8001e52:	05db      	lsls	r3, r3, #23
 8001e54:	4605      	mov	r5, r0
 8001e56:	460c      	mov	r4, r1
 8001e58:	4616      	mov	r6, r2
 8001e5a:	d505      	bpl.n	8001e68 <__swrite+0x1e>
 8001e5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e60:	2302      	movs	r3, #2
 8001e62:	2200      	movs	r2, #0
 8001e64:	f000 f94c 	bl	8002100 <_lseek_r>
 8001e68:	89a3      	ldrh	r3, [r4, #12]
 8001e6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001e6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001e72:	81a3      	strh	r3, [r4, #12]
 8001e74:	4632      	mov	r2, r6
 8001e76:	463b      	mov	r3, r7
 8001e78:	4628      	mov	r0, r5
 8001e7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001e7e:	f000 b973 	b.w	8002168 <_write_r>

08001e82 <__sseek>:
 8001e82:	b510      	push	{r4, lr}
 8001e84:	460c      	mov	r4, r1
 8001e86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e8a:	f000 f939 	bl	8002100 <_lseek_r>
 8001e8e:	1c43      	adds	r3, r0, #1
 8001e90:	89a3      	ldrh	r3, [r4, #12]
 8001e92:	bf15      	itete	ne
 8001e94:	6560      	strne	r0, [r4, #84]	; 0x54
 8001e96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001e9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001e9e:	81a3      	strheq	r3, [r4, #12]
 8001ea0:	bf18      	it	ne
 8001ea2:	81a3      	strhne	r3, [r4, #12]
 8001ea4:	bd10      	pop	{r4, pc}

08001ea6 <__sclose>:
 8001ea6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001eaa:	f000 b8f7 	b.w	800209c <_close_r>

08001eae <__swbuf_r>:
 8001eae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eb0:	460e      	mov	r6, r1
 8001eb2:	4614      	mov	r4, r2
 8001eb4:	4605      	mov	r5, r0
 8001eb6:	b118      	cbz	r0, 8001ec0 <__swbuf_r+0x12>
 8001eb8:	6a03      	ldr	r3, [r0, #32]
 8001eba:	b90b      	cbnz	r3, 8001ec0 <__swbuf_r+0x12>
 8001ebc:	f7ff fb0a 	bl	80014d4 <__sinit>
 8001ec0:	69a3      	ldr	r3, [r4, #24]
 8001ec2:	60a3      	str	r3, [r4, #8]
 8001ec4:	89a3      	ldrh	r3, [r4, #12]
 8001ec6:	071a      	lsls	r2, r3, #28
 8001ec8:	d525      	bpl.n	8001f16 <__swbuf_r+0x68>
 8001eca:	6923      	ldr	r3, [r4, #16]
 8001ecc:	b31b      	cbz	r3, 8001f16 <__swbuf_r+0x68>
 8001ece:	6823      	ldr	r3, [r4, #0]
 8001ed0:	6922      	ldr	r2, [r4, #16]
 8001ed2:	1a98      	subs	r0, r3, r2
 8001ed4:	6963      	ldr	r3, [r4, #20]
 8001ed6:	b2f6      	uxtb	r6, r6
 8001ed8:	4283      	cmp	r3, r0
 8001eda:	4637      	mov	r7, r6
 8001edc:	dc04      	bgt.n	8001ee8 <__swbuf_r+0x3a>
 8001ede:	4621      	mov	r1, r4
 8001ee0:	4628      	mov	r0, r5
 8001ee2:	f7ff ff6d 	bl	8001dc0 <_fflush_r>
 8001ee6:	b9e0      	cbnz	r0, 8001f22 <__swbuf_r+0x74>
 8001ee8:	68a3      	ldr	r3, [r4, #8]
 8001eea:	3b01      	subs	r3, #1
 8001eec:	60a3      	str	r3, [r4, #8]
 8001eee:	6823      	ldr	r3, [r4, #0]
 8001ef0:	1c5a      	adds	r2, r3, #1
 8001ef2:	6022      	str	r2, [r4, #0]
 8001ef4:	701e      	strb	r6, [r3, #0]
 8001ef6:	6962      	ldr	r2, [r4, #20]
 8001ef8:	1c43      	adds	r3, r0, #1
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d004      	beq.n	8001f08 <__swbuf_r+0x5a>
 8001efe:	89a3      	ldrh	r3, [r4, #12]
 8001f00:	07db      	lsls	r3, r3, #31
 8001f02:	d506      	bpl.n	8001f12 <__swbuf_r+0x64>
 8001f04:	2e0a      	cmp	r6, #10
 8001f06:	d104      	bne.n	8001f12 <__swbuf_r+0x64>
 8001f08:	4621      	mov	r1, r4
 8001f0a:	4628      	mov	r0, r5
 8001f0c:	f7ff ff58 	bl	8001dc0 <_fflush_r>
 8001f10:	b938      	cbnz	r0, 8001f22 <__swbuf_r+0x74>
 8001f12:	4638      	mov	r0, r7
 8001f14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f16:	4621      	mov	r1, r4
 8001f18:	4628      	mov	r0, r5
 8001f1a:	f000 f805 	bl	8001f28 <__swsetup_r>
 8001f1e:	2800      	cmp	r0, #0
 8001f20:	d0d5      	beq.n	8001ece <__swbuf_r+0x20>
 8001f22:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001f26:	e7f4      	b.n	8001f12 <__swbuf_r+0x64>

08001f28 <__swsetup_r>:
 8001f28:	b538      	push	{r3, r4, r5, lr}
 8001f2a:	4b2a      	ldr	r3, [pc, #168]	; (8001fd4 <__swsetup_r+0xac>)
 8001f2c:	4605      	mov	r5, r0
 8001f2e:	6818      	ldr	r0, [r3, #0]
 8001f30:	460c      	mov	r4, r1
 8001f32:	b118      	cbz	r0, 8001f3c <__swsetup_r+0x14>
 8001f34:	6a03      	ldr	r3, [r0, #32]
 8001f36:	b90b      	cbnz	r3, 8001f3c <__swsetup_r+0x14>
 8001f38:	f7ff facc 	bl	80014d4 <__sinit>
 8001f3c:	89a3      	ldrh	r3, [r4, #12]
 8001f3e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001f42:	0718      	lsls	r0, r3, #28
 8001f44:	d422      	bmi.n	8001f8c <__swsetup_r+0x64>
 8001f46:	06d9      	lsls	r1, r3, #27
 8001f48:	d407      	bmi.n	8001f5a <__swsetup_r+0x32>
 8001f4a:	2309      	movs	r3, #9
 8001f4c:	602b      	str	r3, [r5, #0]
 8001f4e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001f52:	81a3      	strh	r3, [r4, #12]
 8001f54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f58:	e034      	b.n	8001fc4 <__swsetup_r+0x9c>
 8001f5a:	0758      	lsls	r0, r3, #29
 8001f5c:	d512      	bpl.n	8001f84 <__swsetup_r+0x5c>
 8001f5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001f60:	b141      	cbz	r1, 8001f74 <__swsetup_r+0x4c>
 8001f62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001f66:	4299      	cmp	r1, r3
 8001f68:	d002      	beq.n	8001f70 <__swsetup_r+0x48>
 8001f6a:	4628      	mov	r0, r5
 8001f6c:	f000 f90e 	bl	800218c <_free_r>
 8001f70:	2300      	movs	r3, #0
 8001f72:	6363      	str	r3, [r4, #52]	; 0x34
 8001f74:	89a3      	ldrh	r3, [r4, #12]
 8001f76:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001f7a:	81a3      	strh	r3, [r4, #12]
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	6063      	str	r3, [r4, #4]
 8001f80:	6923      	ldr	r3, [r4, #16]
 8001f82:	6023      	str	r3, [r4, #0]
 8001f84:	89a3      	ldrh	r3, [r4, #12]
 8001f86:	f043 0308 	orr.w	r3, r3, #8
 8001f8a:	81a3      	strh	r3, [r4, #12]
 8001f8c:	6923      	ldr	r3, [r4, #16]
 8001f8e:	b94b      	cbnz	r3, 8001fa4 <__swsetup_r+0x7c>
 8001f90:	89a3      	ldrh	r3, [r4, #12]
 8001f92:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001f96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f9a:	d003      	beq.n	8001fa4 <__swsetup_r+0x7c>
 8001f9c:	4621      	mov	r1, r4
 8001f9e:	4628      	mov	r0, r5
 8001fa0:	f000 f840 	bl	8002024 <__smakebuf_r>
 8001fa4:	89a0      	ldrh	r0, [r4, #12]
 8001fa6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001faa:	f010 0301 	ands.w	r3, r0, #1
 8001fae:	d00a      	beq.n	8001fc6 <__swsetup_r+0x9e>
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	60a3      	str	r3, [r4, #8]
 8001fb4:	6963      	ldr	r3, [r4, #20]
 8001fb6:	425b      	negs	r3, r3
 8001fb8:	61a3      	str	r3, [r4, #24]
 8001fba:	6923      	ldr	r3, [r4, #16]
 8001fbc:	b943      	cbnz	r3, 8001fd0 <__swsetup_r+0xa8>
 8001fbe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001fc2:	d1c4      	bne.n	8001f4e <__swsetup_r+0x26>
 8001fc4:	bd38      	pop	{r3, r4, r5, pc}
 8001fc6:	0781      	lsls	r1, r0, #30
 8001fc8:	bf58      	it	pl
 8001fca:	6963      	ldrpl	r3, [r4, #20]
 8001fcc:	60a3      	str	r3, [r4, #8]
 8001fce:	e7f4      	b.n	8001fba <__swsetup_r+0x92>
 8001fd0:	2000      	movs	r0, #0
 8001fd2:	e7f7      	b.n	8001fc4 <__swsetup_r+0x9c>
 8001fd4:	2000005c 	.word	0x2000005c

08001fd8 <__swhatbuf_r>:
 8001fd8:	b570      	push	{r4, r5, r6, lr}
 8001fda:	460c      	mov	r4, r1
 8001fdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001fe0:	2900      	cmp	r1, #0
 8001fe2:	b096      	sub	sp, #88	; 0x58
 8001fe4:	4615      	mov	r5, r2
 8001fe6:	461e      	mov	r6, r3
 8001fe8:	da0d      	bge.n	8002006 <__swhatbuf_r+0x2e>
 8001fea:	89a3      	ldrh	r3, [r4, #12]
 8001fec:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001ff0:	f04f 0100 	mov.w	r1, #0
 8001ff4:	bf0c      	ite	eq
 8001ff6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8001ffa:	2340      	movne	r3, #64	; 0x40
 8001ffc:	2000      	movs	r0, #0
 8001ffe:	6031      	str	r1, [r6, #0]
 8002000:	602b      	str	r3, [r5, #0]
 8002002:	b016      	add	sp, #88	; 0x58
 8002004:	bd70      	pop	{r4, r5, r6, pc}
 8002006:	466a      	mov	r2, sp
 8002008:	f000 f858 	bl	80020bc <_fstat_r>
 800200c:	2800      	cmp	r0, #0
 800200e:	dbec      	blt.n	8001fea <__swhatbuf_r+0x12>
 8002010:	9901      	ldr	r1, [sp, #4]
 8002012:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8002016:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800201a:	4259      	negs	r1, r3
 800201c:	4159      	adcs	r1, r3
 800201e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002022:	e7eb      	b.n	8001ffc <__swhatbuf_r+0x24>

08002024 <__smakebuf_r>:
 8002024:	898b      	ldrh	r3, [r1, #12]
 8002026:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002028:	079d      	lsls	r5, r3, #30
 800202a:	4606      	mov	r6, r0
 800202c:	460c      	mov	r4, r1
 800202e:	d507      	bpl.n	8002040 <__smakebuf_r+0x1c>
 8002030:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002034:	6023      	str	r3, [r4, #0]
 8002036:	6123      	str	r3, [r4, #16]
 8002038:	2301      	movs	r3, #1
 800203a:	6163      	str	r3, [r4, #20]
 800203c:	b002      	add	sp, #8
 800203e:	bd70      	pop	{r4, r5, r6, pc}
 8002040:	ab01      	add	r3, sp, #4
 8002042:	466a      	mov	r2, sp
 8002044:	f7ff ffc8 	bl	8001fd8 <__swhatbuf_r>
 8002048:	9900      	ldr	r1, [sp, #0]
 800204a:	4605      	mov	r5, r0
 800204c:	4630      	mov	r0, r6
 800204e:	f7ff fc21 	bl	8001894 <_malloc_r>
 8002052:	b948      	cbnz	r0, 8002068 <__smakebuf_r+0x44>
 8002054:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002058:	059a      	lsls	r2, r3, #22
 800205a:	d4ef      	bmi.n	800203c <__smakebuf_r+0x18>
 800205c:	f023 0303 	bic.w	r3, r3, #3
 8002060:	f043 0302 	orr.w	r3, r3, #2
 8002064:	81a3      	strh	r3, [r4, #12]
 8002066:	e7e3      	b.n	8002030 <__smakebuf_r+0xc>
 8002068:	89a3      	ldrh	r3, [r4, #12]
 800206a:	6020      	str	r0, [r4, #0]
 800206c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002070:	81a3      	strh	r3, [r4, #12]
 8002072:	9b00      	ldr	r3, [sp, #0]
 8002074:	6163      	str	r3, [r4, #20]
 8002076:	9b01      	ldr	r3, [sp, #4]
 8002078:	6120      	str	r0, [r4, #16]
 800207a:	b15b      	cbz	r3, 8002094 <__smakebuf_r+0x70>
 800207c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002080:	4630      	mov	r0, r6
 8002082:	f000 f82d 	bl	80020e0 <_isatty_r>
 8002086:	b128      	cbz	r0, 8002094 <__smakebuf_r+0x70>
 8002088:	89a3      	ldrh	r3, [r4, #12]
 800208a:	f023 0303 	bic.w	r3, r3, #3
 800208e:	f043 0301 	orr.w	r3, r3, #1
 8002092:	81a3      	strh	r3, [r4, #12]
 8002094:	89a3      	ldrh	r3, [r4, #12]
 8002096:	431d      	orrs	r5, r3
 8002098:	81a5      	strh	r5, [r4, #12]
 800209a:	e7cf      	b.n	800203c <__smakebuf_r+0x18>

0800209c <_close_r>:
 800209c:	b538      	push	{r3, r4, r5, lr}
 800209e:	4d06      	ldr	r5, [pc, #24]	; (80020b8 <_close_r+0x1c>)
 80020a0:	2300      	movs	r3, #0
 80020a2:	4604      	mov	r4, r0
 80020a4:	4608      	mov	r0, r1
 80020a6:	602b      	str	r3, [r5, #0]
 80020a8:	f7fe fe30 	bl	8000d0c <_close>
 80020ac:	1c43      	adds	r3, r0, #1
 80020ae:	d102      	bne.n	80020b6 <_close_r+0x1a>
 80020b0:	682b      	ldr	r3, [r5, #0]
 80020b2:	b103      	cbz	r3, 80020b6 <_close_r+0x1a>
 80020b4:	6023      	str	r3, [r4, #0]
 80020b6:	bd38      	pop	{r3, r4, r5, pc}
 80020b8:	200001cc 	.word	0x200001cc

080020bc <_fstat_r>:
 80020bc:	b538      	push	{r3, r4, r5, lr}
 80020be:	4d07      	ldr	r5, [pc, #28]	; (80020dc <_fstat_r+0x20>)
 80020c0:	2300      	movs	r3, #0
 80020c2:	4604      	mov	r4, r0
 80020c4:	4608      	mov	r0, r1
 80020c6:	4611      	mov	r1, r2
 80020c8:	602b      	str	r3, [r5, #0]
 80020ca:	f7fe fe2b 	bl	8000d24 <_fstat>
 80020ce:	1c43      	adds	r3, r0, #1
 80020d0:	d102      	bne.n	80020d8 <_fstat_r+0x1c>
 80020d2:	682b      	ldr	r3, [r5, #0]
 80020d4:	b103      	cbz	r3, 80020d8 <_fstat_r+0x1c>
 80020d6:	6023      	str	r3, [r4, #0]
 80020d8:	bd38      	pop	{r3, r4, r5, pc}
 80020da:	bf00      	nop
 80020dc:	200001cc 	.word	0x200001cc

080020e0 <_isatty_r>:
 80020e0:	b538      	push	{r3, r4, r5, lr}
 80020e2:	4d06      	ldr	r5, [pc, #24]	; (80020fc <_isatty_r+0x1c>)
 80020e4:	2300      	movs	r3, #0
 80020e6:	4604      	mov	r4, r0
 80020e8:	4608      	mov	r0, r1
 80020ea:	602b      	str	r3, [r5, #0]
 80020ec:	f7fe fe2a 	bl	8000d44 <_isatty>
 80020f0:	1c43      	adds	r3, r0, #1
 80020f2:	d102      	bne.n	80020fa <_isatty_r+0x1a>
 80020f4:	682b      	ldr	r3, [r5, #0]
 80020f6:	b103      	cbz	r3, 80020fa <_isatty_r+0x1a>
 80020f8:	6023      	str	r3, [r4, #0]
 80020fa:	bd38      	pop	{r3, r4, r5, pc}
 80020fc:	200001cc 	.word	0x200001cc

08002100 <_lseek_r>:
 8002100:	b538      	push	{r3, r4, r5, lr}
 8002102:	4d07      	ldr	r5, [pc, #28]	; (8002120 <_lseek_r+0x20>)
 8002104:	4604      	mov	r4, r0
 8002106:	4608      	mov	r0, r1
 8002108:	4611      	mov	r1, r2
 800210a:	2200      	movs	r2, #0
 800210c:	602a      	str	r2, [r5, #0]
 800210e:	461a      	mov	r2, r3
 8002110:	f7fe fe23 	bl	8000d5a <_lseek>
 8002114:	1c43      	adds	r3, r0, #1
 8002116:	d102      	bne.n	800211e <_lseek_r+0x1e>
 8002118:	682b      	ldr	r3, [r5, #0]
 800211a:	b103      	cbz	r3, 800211e <_lseek_r+0x1e>
 800211c:	6023      	str	r3, [r4, #0]
 800211e:	bd38      	pop	{r3, r4, r5, pc}
 8002120:	200001cc 	.word	0x200001cc

08002124 <_read_r>:
 8002124:	b538      	push	{r3, r4, r5, lr}
 8002126:	4d07      	ldr	r5, [pc, #28]	; (8002144 <_read_r+0x20>)
 8002128:	4604      	mov	r4, r0
 800212a:	4608      	mov	r0, r1
 800212c:	4611      	mov	r1, r2
 800212e:	2200      	movs	r2, #0
 8002130:	602a      	str	r2, [r5, #0]
 8002132:	461a      	mov	r2, r3
 8002134:	f7fe fdb1 	bl	8000c9a <_read>
 8002138:	1c43      	adds	r3, r0, #1
 800213a:	d102      	bne.n	8002142 <_read_r+0x1e>
 800213c:	682b      	ldr	r3, [r5, #0]
 800213e:	b103      	cbz	r3, 8002142 <_read_r+0x1e>
 8002140:	6023      	str	r3, [r4, #0]
 8002142:	bd38      	pop	{r3, r4, r5, pc}
 8002144:	200001cc 	.word	0x200001cc

08002148 <_sbrk_r>:
 8002148:	b538      	push	{r3, r4, r5, lr}
 800214a:	4d06      	ldr	r5, [pc, #24]	; (8002164 <_sbrk_r+0x1c>)
 800214c:	2300      	movs	r3, #0
 800214e:	4604      	mov	r4, r0
 8002150:	4608      	mov	r0, r1
 8002152:	602b      	str	r3, [r5, #0]
 8002154:	f7fe fe0e 	bl	8000d74 <_sbrk>
 8002158:	1c43      	adds	r3, r0, #1
 800215a:	d102      	bne.n	8002162 <_sbrk_r+0x1a>
 800215c:	682b      	ldr	r3, [r5, #0]
 800215e:	b103      	cbz	r3, 8002162 <_sbrk_r+0x1a>
 8002160:	6023      	str	r3, [r4, #0]
 8002162:	bd38      	pop	{r3, r4, r5, pc}
 8002164:	200001cc 	.word	0x200001cc

08002168 <_write_r>:
 8002168:	b538      	push	{r3, r4, r5, lr}
 800216a:	4d07      	ldr	r5, [pc, #28]	; (8002188 <_write_r+0x20>)
 800216c:	4604      	mov	r4, r0
 800216e:	4608      	mov	r0, r1
 8002170:	4611      	mov	r1, r2
 8002172:	2200      	movs	r2, #0
 8002174:	602a      	str	r2, [r5, #0]
 8002176:	461a      	mov	r2, r3
 8002178:	f7fe fdac 	bl	8000cd4 <_write>
 800217c:	1c43      	adds	r3, r0, #1
 800217e:	d102      	bne.n	8002186 <_write_r+0x1e>
 8002180:	682b      	ldr	r3, [r5, #0]
 8002182:	b103      	cbz	r3, 8002186 <_write_r+0x1e>
 8002184:	6023      	str	r3, [r4, #0]
 8002186:	bd38      	pop	{r3, r4, r5, pc}
 8002188:	200001cc 	.word	0x200001cc

0800218c <_free_r>:
 800218c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800218e:	2900      	cmp	r1, #0
 8002190:	d044      	beq.n	800221c <_free_r+0x90>
 8002192:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002196:	9001      	str	r0, [sp, #4]
 8002198:	2b00      	cmp	r3, #0
 800219a:	f1a1 0404 	sub.w	r4, r1, #4
 800219e:	bfb8      	it	lt
 80021a0:	18e4      	addlt	r4, r4, r3
 80021a2:	f7ff fe35 	bl	8001e10 <__malloc_lock>
 80021a6:	4a1e      	ldr	r2, [pc, #120]	; (8002220 <_free_r+0x94>)
 80021a8:	9801      	ldr	r0, [sp, #4]
 80021aa:	6813      	ldr	r3, [r2, #0]
 80021ac:	b933      	cbnz	r3, 80021bc <_free_r+0x30>
 80021ae:	6063      	str	r3, [r4, #4]
 80021b0:	6014      	str	r4, [r2, #0]
 80021b2:	b003      	add	sp, #12
 80021b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80021b8:	f7ff be30 	b.w	8001e1c <__malloc_unlock>
 80021bc:	42a3      	cmp	r3, r4
 80021be:	d908      	bls.n	80021d2 <_free_r+0x46>
 80021c0:	6825      	ldr	r5, [r4, #0]
 80021c2:	1961      	adds	r1, r4, r5
 80021c4:	428b      	cmp	r3, r1
 80021c6:	bf01      	itttt	eq
 80021c8:	6819      	ldreq	r1, [r3, #0]
 80021ca:	685b      	ldreq	r3, [r3, #4]
 80021cc:	1949      	addeq	r1, r1, r5
 80021ce:	6021      	streq	r1, [r4, #0]
 80021d0:	e7ed      	b.n	80021ae <_free_r+0x22>
 80021d2:	461a      	mov	r2, r3
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	b10b      	cbz	r3, 80021dc <_free_r+0x50>
 80021d8:	42a3      	cmp	r3, r4
 80021da:	d9fa      	bls.n	80021d2 <_free_r+0x46>
 80021dc:	6811      	ldr	r1, [r2, #0]
 80021de:	1855      	adds	r5, r2, r1
 80021e0:	42a5      	cmp	r5, r4
 80021e2:	d10b      	bne.n	80021fc <_free_r+0x70>
 80021e4:	6824      	ldr	r4, [r4, #0]
 80021e6:	4421      	add	r1, r4
 80021e8:	1854      	adds	r4, r2, r1
 80021ea:	42a3      	cmp	r3, r4
 80021ec:	6011      	str	r1, [r2, #0]
 80021ee:	d1e0      	bne.n	80021b2 <_free_r+0x26>
 80021f0:	681c      	ldr	r4, [r3, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	6053      	str	r3, [r2, #4]
 80021f6:	440c      	add	r4, r1
 80021f8:	6014      	str	r4, [r2, #0]
 80021fa:	e7da      	b.n	80021b2 <_free_r+0x26>
 80021fc:	d902      	bls.n	8002204 <_free_r+0x78>
 80021fe:	230c      	movs	r3, #12
 8002200:	6003      	str	r3, [r0, #0]
 8002202:	e7d6      	b.n	80021b2 <_free_r+0x26>
 8002204:	6825      	ldr	r5, [r4, #0]
 8002206:	1961      	adds	r1, r4, r5
 8002208:	428b      	cmp	r3, r1
 800220a:	bf04      	itt	eq
 800220c:	6819      	ldreq	r1, [r3, #0]
 800220e:	685b      	ldreq	r3, [r3, #4]
 8002210:	6063      	str	r3, [r4, #4]
 8002212:	bf04      	itt	eq
 8002214:	1949      	addeq	r1, r1, r5
 8002216:	6021      	streq	r1, [r4, #0]
 8002218:	6054      	str	r4, [r2, #4]
 800221a:	e7ca      	b.n	80021b2 <_free_r+0x26>
 800221c:	b003      	add	sp, #12
 800221e:	bd30      	pop	{r4, r5, pc}
 8002220:	200001c4 	.word	0x200001c4

08002224 <_init>:
 8002224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002226:	bf00      	nop
 8002228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800222a:	bc08      	pop	{r3}
 800222c:	469e      	mov	lr, r3
 800222e:	4770      	bx	lr

08002230 <_fini>:
 8002230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002232:	bf00      	nop
 8002234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002236:	bc08      	pop	{r3}
 8002238:	469e      	mov	lr, r3
 800223a:	4770      	bx	lr
